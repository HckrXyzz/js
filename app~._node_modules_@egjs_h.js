(("undefined"!=typeof self?self:this).webpackJsonp=("undefined"!=typeof self?self:this).webpackJsonp||[]).push([["app~._node_modules_@egjs_h"],{"./node_modules/@egjs/hammerjs/dist/hammer.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@egjs/hammerjs/dist/hammer.esm.js ***!
  \********************************************************/
/*! exports provided: default, INPUT_START, INPUT_MOVE, INPUT_END, INPUT_CANCEL, STATE_POSSIBLE, STATE_BEGAN, STATE_CHANGED, STATE_ENDED, STATE_RECOGNIZED, STATE_CANCELLED, STATE_FAILED, DIRECTION_NONE, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_DOWN, DIRECTION_HORIZONTAL, DIRECTION_VERTICAL, DIRECTION_ALL, Manager, Input, TouchAction, TouchInput, MouseInput, PointerEventInput, TouchMouseInput, SingleTouchInput, Recognizer, AttrRecognizer, Tap, Pan, Swipe, Pinch, Rotate, Press, on, off, each, merge, extend, assign, inherit, bindFn, prefixed, toArray, inArray, uniqueArray, splitStr, boolOrFn, hasParent, addEventListeners, removeEventListeners, defaults */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"INPUT_START\", function() { return INPUT_START; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"INPUT_MOVE\", function() { return INPUT_MOVE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"INPUT_END\", function() { return INPUT_END; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"INPUT_CANCEL\", function() { return INPUT_CANCEL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STATE_POSSIBLE\", function() { return STATE_POSSIBLE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STATE_BEGAN\", function() { return STATE_BEGAN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STATE_CHANGED\", function() { return STATE_CHANGED; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STATE_ENDED\", function() { return STATE_ENDED; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STATE_RECOGNIZED\", function() { return STATE_RECOGNIZED; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STATE_CANCELLED\", function() { return STATE_CANCELLED; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STATE_FAILED\", function() { return STATE_FAILED; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DIRECTION_NONE\", function() { return DIRECTION_NONE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DIRECTION_LEFT\", function() { return DIRECTION_LEFT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DIRECTION_RIGHT\", function() { return DIRECTION_RIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DIRECTION_UP\", function() { return DIRECTION_UP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DIRECTION_DOWN\", function() { return DIRECTION_DOWN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DIRECTION_HORIZONTAL\", function() { return DIRECTION_HORIZONTAL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DIRECTION_VERTICAL\", function() { return DIRECTION_VERTICAL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DIRECTION_ALL\", function() { return DIRECTION_ALL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Manager\", function() { return Manager; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Input\", function() { return Input; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TouchAction\", function() { return TouchAction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TouchInput\", function() { return TouchInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MouseInput\", function() { return MouseInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointerEventInput\", function() { return PointerEventInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TouchMouseInput\", function() { return TouchMouseInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SingleTouchInput\", function() { return SingleTouchInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Recognizer\", function() { return Recognizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AttrRecognizer\", function() { return AttrRecognizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Tap\", function() { return TapRecognizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Pan\", function() { return PanRecognizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Swipe\", function() { return SwipeRecognizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Pinch\", function() { return PinchRecognizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Rotate\", function() { return RotateRecognizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Press\", function() { return PressRecognizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"on\", function() { return addEventListeners; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"off\", function() { return removeEventListeners; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"each\", function() { return each; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"merge\", function() { return merge; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extend\", function() { return extend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assign\", function() { return assign$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inherit\", function() { return inherit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bindFn\", function() { return bindFn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"prefixed\", function() { return prefixed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toArray\", function() { return toArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inArray\", function() { return inArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"uniqueArray\", function() { return uniqueArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"splitStr\", function() { return splitStr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"boolOrFn\", function() { return boolOrFn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasParent\", function() { return hasParent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addEventListeners\", function() { return addEventListeners; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeEventListeners\", function() { return removeEventListeners; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaults\", function() { return defaults$1; });\n/*! Hammer.JS - v2.0.17-rc - 2019-12-16\n * http://naver.github.io/egjs\n *\n * Forked By Naver egjs\n * Copyright (c) hammerjs\n * Licensed under the MIT license */\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\n/**\n * @private\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\n\nif (typeof Object.assign !== 'function') {\n  assign = function assign(target) {\n    if (target === undefined || target === null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    var output = Object(target);\n\n    for (var index = 1; index < arguments.length; index++) {\n      var source = arguments[index];\n\n      if (source !== undefined && source !== null) {\n        for (var nextKey in source) {\n          if (source.hasOwnProperty(nextKey)) {\n            output[nextKey] = source[nextKey];\n          }\n        }\n      }\n    }\n\n    return output;\n  };\n} else {\n  assign = Object.assign;\n}\n\nvar assign$1 = assign;\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = typeof document === \"undefined\" ? {\n  style: {}\n} : document.createElement('div');\nvar TYPE_FUNCTION = 'function';\nvar round = Math.round,\n    abs = Math.abs;\nvar now = Date.now;\n\n/**\n * @private\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\n\nfunction prefixed(obj, property) {\n  var prefix;\n  var prop;\n  var camelProp = property[0].toUpperCase() + property.slice(1);\n  var i = 0;\n\n  while (i < VENDOR_PREFIXES.length) {\n    prefix = VENDOR_PREFIXES[i];\n    prop = prefix ? prefix + camelProp : property;\n\n    if (prop in obj) {\n      return prop;\n    }\n\n    i++;\n  }\n\n  return undefined;\n}\n\n/* eslint-disable no-new-func, no-nested-ternary */\nvar win;\n\nif (typeof window === \"undefined\") {\n  // window is undefined in node.js\n  win = {};\n} else {\n  win = window;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\nfunction getTouchActionProps() {\n  if (!NATIVE_TOUCH_ACTION) {\n    return false;\n  }\n\n  var touchMap = {};\n  var cssSupports = win.CSS && win.CSS.supports;\n  ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {\n    // If css.supports is not supported but there is native touch-action assume it supports\n    // all values. This is the case for IE 10 and 11.\n    return touchMap[val] = cssSupports ? win.CSS.supports('touch-action', val) : true;\n  });\n  return touchMap;\n}\n\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\n\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\nvar SUPPORT_TOUCH = 'ontouchstart' in win;\nvar SUPPORT_POINTER_EVENTS = prefixed(win, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\nvar COMPUTE_INTERVAL = 25;\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * @private\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n  var i;\n\n  if (!obj) {\n    return;\n  }\n\n  if (obj.forEach) {\n    obj.forEach(iterator, context);\n  } else if (obj.length !== undefined) {\n    i = 0;\n\n    while (i < obj.length) {\n      iterator.call(context, obj[i], i, obj);\n      i++;\n    }\n  } else {\n    for (i in obj) {\n      obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n    }\n  }\n}\n\n/**\n * @private\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\n\nfunction boolOrFn(val, args) {\n  if (typeof val === TYPE_FUNCTION) {\n    return val.apply(args ? args[0] || undefined : undefined, args);\n  }\n\n  return val;\n}\n\n/**\n * @private\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n  return str.indexOf(find) > -1;\n}\n\n/**\n * @private\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\n\nfunction cleanTouchActions(actions) {\n  // none\n  if (inStr(actions, TOUCH_ACTION_NONE)) {\n    return TOUCH_ACTION_NONE;\n  }\n\n  var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n  var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers\n  // for different directions, e.g. horizontal pan but vertical swipe?)\n  // we need none (as otherwise with pan-x pan-y combined none of these\n  // recognizers will work, since the browser would handle all panning\n\n  if (hasPanX && hasPanY) {\n    return TOUCH_ACTION_NONE;\n  } // pan-x OR pan-y\n\n\n  if (hasPanX || hasPanY) {\n    return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n  } // manipulation\n\n\n  if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n    return TOUCH_ACTION_MANIPULATION;\n  }\n\n  return TOUCH_ACTION_AUTO;\n}\n\n/**\n * @private\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\n\nvar TouchAction =\n/*#__PURE__*/\nfunction () {\n  function TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n  }\n  /**\n   * @private\n   * set the touchAction value on the element or enable the polyfill\n   * @param {String} value\n   */\n\n\n  var _proto = TouchAction.prototype;\n\n  _proto.set = function set(value) {\n    // find out the touch-action by the event handlers\n    if (value === TOUCH_ACTION_COMPUTE) {\n      value = this.compute();\n    }\n\n    if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n      this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n    }\n\n    this.actions = value.toLowerCase().trim();\n  };\n  /**\n   * @private\n   * just re-set the touchAction value\n   */\n\n\n  _proto.update = function update() {\n    this.set(this.manager.options.touchAction);\n  };\n  /**\n   * @private\n   * compute the value for the touchAction property based on the recognizer's settings\n   * @returns {String} value\n   */\n\n\n  _proto.compute = function compute() {\n    var actions = [];\n    each(this.manager.recognizers, function (recognizer) {\n      if (boolOrFn(recognizer.options.enable, [recognizer])) {\n        actions = actions.concat(recognizer.getTouchAction());\n      }\n    });\n    return cleanTouchActions(actions.join(' '));\n  };\n  /**\n   * @private\n   * this method is called on each input cycle and provides the preventing of the browser behavior\n   * @param {Object} input\n   */\n\n\n  _proto.preventDefaults = function preventDefaults(input) {\n    var srcEvent = input.srcEvent;\n    var direction = input.offsetDirection; // if the touch action did prevented once this session\n\n    if (this.manager.session.prevented) {\n      srcEvent.preventDefault();\n      return;\n    }\n\n    var actions = this.actions;\n    var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n    if (hasNone) {\n      // do not prevent defaults if this is a tap gesture\n      var isTapPointer = input.pointers.length === 1;\n      var isTapMovement = input.distance < 2;\n      var isTapTouchTime = input.deltaTime < 250;\n\n      if (isTapPointer && isTapMovement && isTapTouchTime) {\n        return;\n      }\n    }\n\n    if (hasPanX && hasPanY) {\n      // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n      return;\n    }\n\n    if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {\n      return this.preventSrc(srcEvent);\n    }\n  };\n  /**\n   * @private\n   * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n   * @param {Object} srcEvent\n   */\n\n\n  _proto.preventSrc = function preventSrc(srcEvent) {\n    this.manager.session.prevented = true;\n    srcEvent.preventDefault();\n  };\n\n  return TouchAction;\n}();\n\n/**\n * @private\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n  while (node) {\n    if (node === parent) {\n      return true;\n    }\n\n    node = node.parentNode;\n  }\n\n  return false;\n}\n\n/**\n * @private\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\n\nfunction getCenter(pointers) {\n  var pointersLength = pointers.length; // no need to loop when only one touch\n\n  if (pointersLength === 1) {\n    return {\n      x: round(pointers[0].clientX),\n      y: round(pointers[0].clientY)\n    };\n  }\n\n  var x = 0;\n  var y = 0;\n  var i = 0;\n\n  while (i < pointersLength) {\n    x += pointers[i].clientX;\n    y += pointers[i].clientY;\n    i++;\n  }\n\n  return {\n    x: round(x / pointersLength),\n    y: round(y / pointersLength)\n  };\n}\n\n/**\n * @private\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\n\nfunction simpleCloneInputData(input) {\n  // make a simple copy of the pointers because we will get a reference if we don't\n  // we only need clientXY for the calculations\n  var pointers = [];\n  var i = 0;\n\n  while (i < input.pointers.length) {\n    pointers[i] = {\n      clientX: round(input.pointers[i].clientX),\n      clientY: round(input.pointers[i].clientY)\n    };\n    i++;\n  }\n\n  return {\n    timeStamp: now(),\n    pointers: pointers,\n    center: getCenter(pointers),\n    deltaX: input.deltaX,\n    deltaY: input.deltaY\n  };\n}\n\n/**\n * @private\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\n\nfunction getDistance(p1, p2, props) {\n  if (!props) {\n    props = PROPS_XY;\n  }\n\n  var x = p2[props[0]] - p1[props[0]];\n  var y = p2[props[1]] - p1[props[1]];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * @private\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\n\nfunction getAngle(p1, p2, props) {\n  if (!props) {\n    props = PROPS_XY;\n  }\n\n  var x = p2[props[0]] - p1[props[0]];\n  var y = p2[props[1]] - p1[props[1]];\n  return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * @private\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\n\nfunction getDirection(x, y) {\n  if (x === y) {\n    return DIRECTION_NONE;\n  }\n\n  if (abs(x) >= abs(y)) {\n    return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n  }\n\n  return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\nfunction computeDeltaXY(session, input) {\n  var center = input.center; // let { offsetDelta:offset = {}, prevDelta = {}, prevInput = {} } = session;\n  // jscs throwing error on defalut destructured values and without defaults tests fail\n\n  var offset = session.offsetDelta || {};\n  var prevDelta = session.prevDelta || {};\n  var prevInput = session.prevInput || {};\n\n  if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n    prevDelta = session.prevDelta = {\n      x: prevInput.deltaX || 0,\n      y: prevInput.deltaY || 0\n    };\n    offset = session.offsetDelta = {\n      x: center.x,\n      y: center.y\n    };\n  }\n\n  input.deltaX = prevDelta.x + (center.x - offset.x);\n  input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * @private\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n  return {\n    x: x / deltaTime || 0,\n    y: y / deltaTime || 0\n  };\n}\n\n/**\n * @private\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\n\nfunction getScale(start, end) {\n  return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\n/**\n * @private\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\n\nfunction getRotation(start, end) {\n  return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * @private\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\n\nfunction computeIntervalInputData(session, input) {\n  var last = session.lastInterval || input;\n  var deltaTime = input.timeStamp - last.timeStamp;\n  var velocity;\n  var velocityX;\n  var velocityY;\n  var direction;\n\n  if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n    var deltaX = input.deltaX - last.deltaX;\n    var deltaY = input.deltaY - last.deltaY;\n    var v = getVelocity(deltaTime, deltaX, deltaY);\n    velocityX = v.x;\n    velocityY = v.y;\n    velocity = abs(v.x) > abs(v.y) ? v.x : v.y;\n    direction = getDirection(deltaX, deltaY);\n    session.lastInterval = input;\n  } else {\n    // use latest velocity info if it doesn't overtake a minimum period\n    velocity = last.velocity;\n    velocityX = last.velocityX;\n    velocityY = last.velocityY;\n    direction = last.direction;\n  }\n\n  input.velocity = velocity;\n  input.velocityX = velocityX;\n  input.velocityY = velocityY;\n  input.direction = direction;\n}\n\n/**\n* @private\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\n\nfunction computeInputData(manager, input) {\n  var session = manager.session;\n  var pointers = input.pointers;\n  var pointersLength = pointers.length; // store the first input to calculate the distance and direction\n\n  if (!session.firstInput) {\n    session.firstInput = simpleCloneInputData(input);\n  } // to compute scale and rotation we need to store the multiple touches\n\n\n  if (pointersLength > 1 && !session.firstMultiple) {\n    session.firstMultiple = simpleCloneInputData(input);\n  } else if (pointersLength === 1) {\n    session.firstMultiple = false;\n  }\n\n  var firstInput = session.firstInput,\n      firstMultiple = session.firstMultiple;\n  var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n  var center = input.center = getCenter(pointers);\n  input.timeStamp = now();\n  input.deltaTime = input.timeStamp - firstInput.timeStamp;\n  input.angle = getAngle(offsetCenter, center);\n  input.distance = getDistance(offsetCenter, center);\n  computeDeltaXY(session, input);\n  input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n  var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n  input.overallVelocityX = overallVelocity.x;\n  input.overallVelocityY = overallVelocity.y;\n  input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;\n  input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n  input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n  input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;\n  computeIntervalInputData(session, input); // find the correct target\n\n  var target = manager.element;\n  var srcEvent = input.srcEvent;\n  var srcEventTarget;\n\n  if (srcEvent.composedPath) {\n    srcEventTarget = srcEvent.composedPath()[0];\n  } else if (srcEvent.path) {\n    srcEventTarget = srcEvent.path[0];\n  } else {\n    srcEventTarget = srcEvent.target;\n  }\n\n  if (hasParent(srcEventTarget, target)) {\n    target = srcEventTarget;\n  }\n\n  input.target = target;\n}\n\n/**\n * @private\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\n\nfunction inputHandler(manager, eventType, input) {\n  var pointersLen = input.pointers.length;\n  var changedPointersLen = input.changedPointers.length;\n  var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;\n  var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;\n  input.isFirst = !!isFirst;\n  input.isFinal = !!isFinal;\n\n  if (isFirst) {\n    manager.session = {};\n  } // source event is the normalized value of the domEvents\n  // like 'touchstart, mouseup, pointerdown'\n\n\n  input.eventType = eventType; // compute scale, rotation etc\n\n  computeInputData(manager, input); // emit secret event\n\n  manager.emit('hammer.input', input);\n  manager.recognize(input);\n  manager.session.prevInput = input;\n}\n\n/**\n * @private\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n  return str.trim().split(/\\s+/g);\n}\n\n/**\n * @private\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\n\nfunction addEventListeners(target, types, handler) {\n  each(splitStr(types), function (type) {\n    target.addEventListener(type, handler, false);\n  });\n}\n\n/**\n * @private\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\n\nfunction removeEventListeners(target, types, handler) {\n  each(splitStr(types), function (type) {\n    target.removeEventListener(type, handler, false);\n  });\n}\n\n/**\n * @private\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n  var doc = element.ownerDocument || element;\n  return doc.defaultView || doc.parentWindow || window;\n}\n\n/**\n * @private\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\n\nvar Input =\n/*#__PURE__*/\nfunction () {\n  function Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n\n    this.domHandler = function (ev) {\n      if (boolOrFn(manager.options.enable, [manager])) {\n        self.handler(ev);\n      }\n    };\n\n    this.init();\n  }\n  /**\n   * @private\n   * should handle the inputEvent data and trigger the callback\n   * @virtual\n   */\n\n\n  var _proto = Input.prototype;\n\n  _proto.handler = function handler() {};\n  /**\n   * @private\n   * bind the events\n   */\n\n\n  _proto.init = function init() {\n    this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n    this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n    this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  };\n  /**\n   * @private\n   * unbind the events\n   */\n\n\n  _proto.destroy = function destroy() {\n    this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n    this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n    this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  };\n\n  return Input;\n}();\n\n/**\n * @private\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n  if (src.indexOf && !findByKey) {\n    return src.indexOf(find);\n  } else {\n    var i = 0;\n\n    while (i < src.length) {\n      if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {\n        // do not use === here, test fails\n        return i;\n      }\n\n      i++;\n    }\n\n    return -1;\n  }\n}\n\nvar POINTER_INPUT_MAP = {\n  pointerdown: INPUT_START,\n  pointermove: INPUT_MOVE,\n  pointerup: INPUT_END,\n  pointercancel: INPUT_CANCEL,\n  pointerout: INPUT_CANCEL\n}; // in IE10 the pointer types is defined as an enum\n\nvar IE10_POINTER_TYPE_ENUM = {\n  2: INPUT_TYPE_TOUCH,\n  3: INPUT_TYPE_PEN,\n  4: INPUT_TYPE_MOUSE,\n  5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n\n};\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive\n\nif (win.MSPointerEvent && !win.PointerEvent) {\n  POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n  POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n/**\n * @private\n * Pointer events input\n * @constructor\n * @extends Input\n */\n\n\nvar PointerEventInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(PointerEventInput, _Input);\n\n  function PointerEventInput() {\n    var _this;\n\n    var proto = PointerEventInput.prototype;\n    proto.evEl = POINTER_ELEMENT_EVENTS;\n    proto.evWin = POINTER_WINDOW_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.store = _this.manager.session.pointerEvents = [];\n    return _this;\n  }\n  /**\n   * @private\n   * handle mouse events\n   * @param {Object} ev\n   */\n\n\n  var _proto = PointerEventInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var store = this.store;\n    var removePointer = false;\n    var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n    var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n    var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n    var isTouch = pointerType === INPUT_TYPE_TOUCH; // get index of the event in the store\n\n    var storeIndex = inArray(store, ev.pointerId, 'pointerId'); // start and mouse must be down\n\n    if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n      if (storeIndex < 0) {\n        store.push(ev);\n        storeIndex = store.length - 1;\n      }\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n      removePointer = true;\n    } // it not found, so the pointer hasn't been down (so it's probably a hover)\n\n\n    if (storeIndex < 0) {\n      return;\n    } // update the event in the store\n\n\n    store[storeIndex] = ev;\n    this.callback(this.manager, eventType, {\n      pointers: store,\n      changedPointers: [ev],\n      pointerType: pointerType,\n      srcEvent: ev\n    });\n\n    if (removePointer) {\n      // remove from the store\n      store.splice(storeIndex, 1);\n    }\n  };\n\n  return PointerEventInput;\n}(Input);\n\n/**\n * @private\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n  return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * @private\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\n\nfunction uniqueArray(src, key, sort) {\n  var results = [];\n  var values = [];\n  var i = 0;\n\n  while (i < src.length) {\n    var val = key ? src[i][key] : src[i];\n\n    if (inArray(values, val) < 0) {\n      results.push(src[i]);\n    }\n\n    values[i] = val;\n    i++;\n  }\n\n  if (sort) {\n    if (!key) {\n      results = results.sort();\n    } else {\n      results = results.sort(function (a, b) {\n        return a[key] > b[key];\n      });\n    }\n  }\n\n  return results;\n}\n\nvar TOUCH_INPUT_MAP = {\n  touchstart: INPUT_START,\n  touchmove: INPUT_MOVE,\n  touchend: INPUT_END,\n  touchcancel: INPUT_CANCEL\n};\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n/**\n * @private\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\n\nvar TouchInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(TouchInput, _Input);\n\n  function TouchInput() {\n    var _this;\n\n    TouchInput.prototype.evTarget = TOUCH_TARGET_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.targetIds = {}; // this.evTarget = TOUCH_TARGET_EVENTS;\n\n    return _this;\n  }\n\n  var _proto = TouchInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var type = TOUCH_INPUT_MAP[ev.type];\n    var touches = getTouches.call(this, ev, type);\n\n    if (!touches) {\n      return;\n    }\n\n    this.callback(this.manager, type, {\n      pointers: touches[0],\n      changedPointers: touches[1],\n      pointerType: INPUT_TYPE_TOUCH,\n      srcEvent: ev\n    });\n  };\n\n  return TouchInput;\n}(Input);\n\nfunction getTouches(ev, type) {\n  var allTouches = toArray(ev.touches);\n  var targetIds = this.targetIds; // when there is only one touch, the process can be simplified\n\n  if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n    targetIds[allTouches[0].identifier] = true;\n    return [allTouches, allTouches];\n  }\n\n  var i;\n  var targetTouches;\n  var changedTouches = toArray(ev.changedTouches);\n  var changedTargetTouches = [];\n  var target = this.target; // get target touches from touches\n\n  targetTouches = allTouches.filter(function (touch) {\n    return hasParent(touch.target, target);\n  }); // collect touches\n\n  if (type === INPUT_START) {\n    i = 0;\n\n    while (i < targetTouches.length) {\n      targetIds[targetTouches[i].identifier] = true;\n      i++;\n    }\n  } // filter changed touches to only contain touches that exist in the collected target ids\n\n\n  i = 0;\n\n  while (i < changedTouches.length) {\n    if (targetIds[changedTouches[i].identifier]) {\n      changedTargetTouches.push(changedTouches[i]);\n    } // cleanup removed touches\n\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n      delete targetIds[changedTouches[i].identifier];\n    }\n\n    i++;\n  }\n\n  if (!changedTargetTouches.length) {\n    return;\n  }\n\n  return [// merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n  uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];\n}\n\nvar MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n/**\n * @private\n * Mouse events input\n * @constructor\n * @extends Input\n */\n\nvar MouseInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(MouseInput, _Input);\n\n  function MouseInput() {\n    var _this;\n\n    var proto = MouseInput.prototype;\n    proto.evEl = MOUSE_ELEMENT_EVENTS;\n    proto.evWin = MOUSE_WINDOW_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.pressed = false; // mousedown state\n\n    return _this;\n  }\n  /**\n   * @private\n   * handle mouse events\n   * @param {Object} ev\n   */\n\n\n  var _proto = MouseInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down\n\n    if (eventType & INPUT_START && ev.button === 0) {\n      this.pressed = true;\n    }\n\n    if (eventType & INPUT_MOVE && ev.which !== 1) {\n      eventType = INPUT_END;\n    } // mouse must be down\n\n\n    if (!this.pressed) {\n      return;\n    }\n\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: INPUT_TYPE_MOUSE,\n      srcEvent: ev\n    });\n  };\n\n  return MouseInput;\n}(Input);\n\n/**\n * @private\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction setLastTouch(eventData) {\n  var _eventData$changedPoi = eventData.changedPointers,\n      touch = _eventData$changedPoi[0];\n\n  if (touch.identifier === this.primaryTouch) {\n    var lastTouch = {\n      x: touch.clientX,\n      y: touch.clientY\n    };\n    var lts = this.lastTouches;\n    this.lastTouches.push(lastTouch);\n\n    var removeLastTouch = function removeLastTouch() {\n      var i = lts.indexOf(lastTouch);\n\n      if (i > -1) {\n        lts.splice(i, 1);\n      }\n    };\n\n    setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n  }\n}\n\nfunction recordTouches(eventType, eventData) {\n  if (eventType & INPUT_START) {\n    this.primaryTouch = eventData.changedPointers[0].identifier;\n    setLastTouch.call(this, eventData);\n  } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n    setLastTouch.call(this, eventData);\n  }\n}\n\nfunction isSyntheticEvent(eventData) {\n  var x = eventData.srcEvent.clientX;\n  var y = eventData.srcEvent.clientY;\n\n  for (var i = 0; i < this.lastTouches.length; i++) {\n    var t = this.lastTouches[i];\n    var dx = Math.abs(x - t.x);\n    var dy = Math.abs(y - t.y);\n\n    if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar TouchMouseInput =\n/*#__PURE__*/\nfunction () {\n  var TouchMouseInput =\n  /*#__PURE__*/\n  function (_Input) {\n    _inheritsLoose(TouchMouseInput, _Input);\n\n    function TouchMouseInput(_manager, callback) {\n      var _this;\n\n      _this = _Input.call(this, _manager, callback) || this;\n\n      _this.handler = function (manager, inputEvent, inputData) {\n        var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;\n        var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n          return;\n        } // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n\n\n        if (isTouch) {\n          recordTouches.call(_assertThisInitialized(_assertThisInitialized(_this)), inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(_assertThisInitialized(_assertThisInitialized(_this)), inputData)) {\n          return;\n        }\n\n        _this.callback(manager, inputEvent, inputData);\n      };\n\n      _this.touch = new TouchInput(_this.manager, _this.handler);\n      _this.mouse = new MouseInput(_this.manager, _this.handler);\n      _this.primaryTouch = null;\n      _this.lastTouches = [];\n      return _this;\n    }\n    /**\n     * @private\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n\n\n    var _proto = TouchMouseInput.prototype;\n\n    /**\n     * @private\n     * remove the event listeners\n     */\n    _proto.destroy = function destroy() {\n      this.touch.destroy();\n      this.mouse.destroy();\n    };\n\n    return TouchMouseInput;\n  }(Input);\n\n  return TouchMouseInput;\n}();\n\n/**\n * @private\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\n\nfunction createInputInstance(manager) {\n  var Type; // let inputClass = manager.options.inputClass;\n\n  var inputClass = manager.options.inputClass;\n\n  if (inputClass) {\n    Type = inputClass;\n  } else if (SUPPORT_POINTER_EVENTS) {\n    Type = PointerEventInput;\n  } else if (SUPPORT_ONLY_TOUCH) {\n    Type = TouchInput;\n  } else if (!SUPPORT_TOUCH) {\n    Type = MouseInput;\n  } else {\n    Type = TouchMouseInput;\n  }\n\n  return new Type(manager, inputHandler);\n}\n\n/**\n * @private\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\n\nfunction invokeArrayArg(arg, fn, context) {\n  if (Array.isArray(arg)) {\n    each(arg, context[fn], context);\n    return true;\n  }\n\n  return false;\n}\n\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * @private\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n  return _uniqueId++;\n}\n\n/**\n * @private\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n  var manager = recognizer.manager;\n\n  if (manager) {\n    return manager.get(otherRecognizer);\n  }\n\n  return otherRecognizer;\n}\n\n/**\n * @private\n * get a usable string, used as event postfix\n * @param {constant} state\n * @returns {String} state\n */\n\nfunction stateStr(state) {\n  if (state & STATE_CANCELLED) {\n    return 'cancel';\n  } else if (state & STATE_ENDED) {\n    return 'end';\n  } else if (state & STATE_CHANGED) {\n    return 'move';\n  } else if (state & STATE_BEGAN) {\n    return 'start';\n  }\n\n  return '';\n}\n\n/**\n * @private\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\n\n/**\n * @private\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\n\nvar Recognizer =\n/*#__PURE__*/\nfunction () {\n  function Recognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.options = _extends({\n      enable: true\n    }, options);\n    this.id = uniqueId();\n    this.manager = null; // default is enable true\n\n    this.state = STATE_POSSIBLE;\n    this.simultaneous = {};\n    this.requireFail = [];\n  }\n  /**\n   * @private\n   * set options\n   * @param {Object} options\n   * @return {Recognizer}\n   */\n\n\n  var _proto = Recognizer.prototype;\n\n  _proto.set = function set(options) {\n    assign$1(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state\n\n    this.manager && this.manager.touchAction.update();\n    return this;\n  };\n  /**\n   * @private\n   * recognize simultaneous with an other recognizer.\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.recognizeWith = function recognizeWith(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n      return this;\n    }\n\n    var simultaneous = this.simultaneous;\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n    if (!simultaneous[otherRecognizer.id]) {\n      simultaneous[otherRecognizer.id] = otherRecognizer;\n      otherRecognizer.recognizeWith(this);\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n      return this;\n    }\n\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n    delete this.simultaneous[otherRecognizer.id];\n    return this;\n  };\n  /**\n   * @private\n   * recognizer can only run when an other is failing\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.requireFailure = function requireFailure(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n      return this;\n    }\n\n    var requireFail = this.requireFail;\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n    if (inArray(requireFail, otherRecognizer) === -1) {\n      requireFail.push(otherRecognizer);\n      otherRecognizer.requireFailure(this);\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * drop the requireFailure link. it does not remove the link on the other recognizer.\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n      return this;\n    }\n\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n    var index = inArray(this.requireFail, otherRecognizer);\n\n    if (index > -1) {\n      this.requireFail.splice(index, 1);\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * has require failures boolean\n   * @returns {boolean}\n   */\n\n\n  _proto.hasRequireFailures = function hasRequireFailures() {\n    return this.requireFail.length > 0;\n  };\n  /**\n   * @private\n   * if the recognizer can recognize simultaneous with an other recognizer\n   * @param {Recognizer} otherRecognizer\n   * @returns {Boolean}\n   */\n\n\n  _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {\n    return !!this.simultaneous[otherRecognizer.id];\n  };\n  /**\n   * @private\n   * You should use `tryEmit` instead of `emit` directly to check\n   * that all the needed recognizers has failed before emitting.\n   * @param {Object} input\n   */\n\n\n  _proto.emit = function emit(input) {\n    var self = this;\n    var state = this.state;\n\n    function emit(event) {\n      self.manager.emit(event, input);\n    } // 'panstart' and 'panmove'\n\n\n    if (state < STATE_ENDED) {\n      emit(self.options.event + stateStr(state));\n    }\n\n    emit(self.options.event); // simple 'eventName' events\n\n    if (input.additionalEvent) {\n      // additional event(panleft, panright, pinchin, pinchout...)\n      emit(input.additionalEvent);\n    } // panend and pancancel\n\n\n    if (state >= STATE_ENDED) {\n      emit(self.options.event + stateStr(state));\n    }\n  };\n  /**\n   * @private\n   * Check that all the require failure recognizers has failed,\n   * if true, it emits a gesture event,\n   * otherwise, setup the state to FAILED.\n   * @param {Object} input\n   */\n\n\n  _proto.tryEmit = function tryEmit(input) {\n    if (this.canEmit()) {\n      return this.emit(input);\n    } // it's failing anyway\n\n\n    this.state = STATE_FAILED;\n  };\n  /**\n   * @private\n   * can we emit?\n   * @returns {boolean}\n   */\n\n\n  _proto.canEmit = function canEmit() {\n    var i = 0;\n\n    while (i < this.requireFail.length) {\n      if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n        return false;\n      }\n\n      i++;\n    }\n\n    return true;\n  };\n  /**\n   * @private\n   * update the recognizer\n   * @param {Object} inputData\n   */\n\n\n  _proto.recognize = function recognize(inputData) {\n    // make a new copy of the inputData\n    // so we can change the inputData without messing up the other recognizers\n    var inputDataClone = assign$1({}, inputData); // is is enabled and allow recognizing?\n\n    if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n      this.reset();\n      this.state = STATE_FAILED;\n      return;\n    } // reset when we've reached the end\n\n\n    if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n      this.state = STATE_POSSIBLE;\n    }\n\n    this.state = this.process(inputDataClone); // the recognizer has recognized a gesture\n    // so trigger an event\n\n    if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n      this.tryEmit(inputDataClone);\n    }\n  };\n  /**\n   * @private\n   * return the state of the recognizer\n   * the actual recognizing happens in this method\n   * @virtual\n   * @param {Object} inputData\n   * @returns {constant} STATE\n   */\n\n  /* jshint ignore:start */\n\n\n  _proto.process = function process(inputData) {};\n  /* jshint ignore:end */\n\n  /**\n   * @private\n   * return the preferred touch-action\n   * @virtual\n   * @returns {Array}\n   */\n\n\n  _proto.getTouchAction = function getTouchAction() {};\n  /**\n   * @private\n   * called when the gesture isn't allowed to recognize\n   * like when another is being recognized or it is disabled\n   * @virtual\n   */\n\n\n  _proto.reset = function reset() {};\n\n  return Recognizer;\n}();\n\n/**\n * @private\n * A tap is recognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\n\nvar TapRecognizer =\n/*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(TapRecognizer, _Recognizer);\n\n  function TapRecognizer(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _Recognizer.call(this, _extends({\n      event: 'tap',\n      pointers: 1,\n      taps: 1,\n      interval: 300,\n      // max time between the multi-tap taps\n      time: 250,\n      // max time of the pointer to be down (like finger on the screen)\n      threshold: 9,\n      // a minimal movement is ok, but keep it low\n      posThreshold: 10\n    }, options)) || this; // previous time and center,\n    // used for tap counting\n\n    _this.pTime = false;\n    _this.pCenter = false;\n    _this._timer = null;\n    _this._input = null;\n    _this.count = 0;\n    return _this;\n  }\n\n  var _proto = TapRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_MANIPULATION];\n  };\n\n  _proto.process = function process(input) {\n    var _this2 = this;\n\n    var options = this.options;\n    var validPointers = input.pointers.length === options.pointers;\n    var validMovement = input.distance < options.threshold;\n    var validTouchTime = input.deltaTime < options.time;\n    this.reset();\n\n    if (input.eventType & INPUT_START && this.count === 0) {\n      return this.failTimeout();\n    } // we only allow little movement\n    // and we've reached an end event, so a tap is possible\n\n\n    if (validMovement && validTouchTime && validPointers) {\n      if (input.eventType !== INPUT_END) {\n        return this.failTimeout();\n      }\n\n      var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;\n      var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n      this.pTime = input.timeStamp;\n      this.pCenter = input.center;\n\n      if (!validMultiTap || !validInterval) {\n        this.count = 1;\n      } else {\n        this.count += 1;\n      }\n\n      this._input = input; // if tap count matches we have recognized it,\n      // else it has began recognizing...\n\n      var tapCount = this.count % options.taps;\n\n      if (tapCount === 0) {\n        // no failing requirements, immediately trigger the tap event\n        // or wait as long as the multitap interval to trigger\n        if (!this.hasRequireFailures()) {\n          return STATE_RECOGNIZED;\n        } else {\n          this._timer = setTimeout(function () {\n            _this2.state = STATE_RECOGNIZED;\n\n            _this2.tryEmit();\n          }, options.interval);\n          return STATE_BEGAN;\n        }\n      }\n    }\n\n    return STATE_FAILED;\n  };\n\n  _proto.failTimeout = function failTimeout() {\n    var _this3 = this;\n\n    this._timer = setTimeout(function () {\n      _this3.state = STATE_FAILED;\n    }, this.options.interval);\n    return STATE_FAILED;\n  };\n\n  _proto.reset = function reset() {\n    clearTimeout(this._timer);\n  };\n\n  _proto.emit = function emit() {\n    if (this.state === STATE_RECOGNIZED) {\n      this._input.tapCount = this.count;\n      this.manager.emit(this.options.event, this._input);\n    }\n  };\n\n  return TapRecognizer;\n}(Recognizer);\n\n/**\n * @private\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\n\nvar AttrRecognizer =\n/*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(AttrRecognizer, _Recognizer);\n\n  function AttrRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _Recognizer.call(this, _extends({\n      pointers: 1\n    }, options)) || this;\n  }\n  /**\n   * @private\n   * Used to check if it the recognizer receives valid input, like input.distance > 10.\n   * @memberof AttrRecognizer\n   * @param {Object} input\n   * @returns {Boolean} recognized\n   */\n\n\n  var _proto = AttrRecognizer.prototype;\n\n  _proto.attrTest = function attrTest(input) {\n    var optionPointers = this.options.pointers;\n    return optionPointers === 0 || input.pointers.length === optionPointers;\n  };\n  /**\n   * @private\n   * Process the input and return the state for the recognizer\n   * @memberof AttrRecognizer\n   * @param {Object} input\n   * @returns {*} State\n   */\n\n\n  _proto.process = function process(input) {\n    var state = this.state;\n    var eventType = input.eventType;\n    var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n    var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED\n\n    if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n      return state | STATE_CANCELLED;\n    } else if (isRecognized || isValid) {\n      if (eventType & INPUT_END) {\n        return state | STATE_ENDED;\n      } else if (!(state & STATE_BEGAN)) {\n        return STATE_BEGAN;\n      }\n\n      return state | STATE_CHANGED;\n    }\n\n    return STATE_FAILED;\n  };\n\n  return AttrRecognizer;\n}(Recognizer);\n\n/**\n * @private\n * direction cons to string\n * @param {constant} direction\n * @returns {String}\n */\n\nfunction directionStr(direction) {\n  if (direction === DIRECTION_DOWN) {\n    return 'down';\n  } else if (direction === DIRECTION_UP) {\n    return 'up';\n  } else if (direction === DIRECTION_LEFT) {\n    return 'left';\n  } else if (direction === DIRECTION_RIGHT) {\n    return 'right';\n  }\n\n  return '';\n}\n\n/**\n * @private\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar PanRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(PanRecognizer, _AttrRecognizer);\n\n  function PanRecognizer(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _AttrRecognizer.call(this, _extends({\n      event: 'pan',\n      threshold: 10,\n      pointers: 1,\n      direction: DIRECTION_ALL\n    }, options)) || this;\n    _this.pX = null;\n    _this.pY = null;\n    return _this;\n  }\n\n  var _proto = PanRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    var direction = this.options.direction;\n    var actions = [];\n\n    if (direction & DIRECTION_HORIZONTAL) {\n      actions.push(TOUCH_ACTION_PAN_Y);\n    }\n\n    if (direction & DIRECTION_VERTICAL) {\n      actions.push(TOUCH_ACTION_PAN_X);\n    }\n\n    return actions;\n  };\n\n  _proto.directionTest = function directionTest(input) {\n    var options = this.options;\n    var hasMoved = true;\n    var distance = input.distance;\n    var direction = input.direction;\n    var x = input.deltaX;\n    var y = input.deltaY; // lock to axis?\n\n    if (!(direction & options.direction)) {\n      if (options.direction & DIRECTION_HORIZONTAL) {\n        direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n        hasMoved = x !== this.pX;\n        distance = Math.abs(input.deltaX);\n      } else {\n        direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n        hasMoved = y !== this.pY;\n        distance = Math.abs(input.deltaY);\n      }\n    }\n\n    input.direction = direction;\n    return hasMoved && distance > options.threshold && direction & options.direction;\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    return AttrRecognizer.prototype.attrTest.call(this, input) && ( // replace with a super call\n    this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));\n  };\n\n  _proto.emit = function emit(input) {\n    this.pX = input.deltaX;\n    this.pY = input.deltaY;\n    var direction = directionStr(input.direction);\n\n    if (direction) {\n      input.additionalEvent = this.options.event + direction;\n    }\n\n    _AttrRecognizer.prototype.emit.call(this, input);\n  };\n\n  return PanRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar SwipeRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(SwipeRecognizer, _AttrRecognizer);\n\n  function SwipeRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _AttrRecognizer.call(this, _extends({\n      event: 'swipe',\n      threshold: 10,\n      velocity: 0.3,\n      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n      pointers: 1\n    }, options)) || this;\n  }\n\n  var _proto = SwipeRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return PanRecognizer.prototype.getTouchAction.call(this);\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    var direction = this.options.direction;\n    var velocity;\n\n    if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n      velocity = input.overallVelocity;\n    } else if (direction & DIRECTION_HORIZONTAL) {\n      velocity = input.overallVelocityX;\n    } else if (direction & DIRECTION_VERTICAL) {\n      velocity = input.overallVelocityY;\n    }\n\n    return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n  };\n\n  _proto.emit = function emit(input) {\n    var direction = directionStr(input.offsetDirection);\n\n    if (direction) {\n      this.manager.emit(this.options.event + direction, input);\n    }\n\n    this.manager.emit(this.options.event, input);\n  };\n\n  return SwipeRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar PinchRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(PinchRecognizer, _AttrRecognizer);\n\n  function PinchRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _AttrRecognizer.call(this, _extends({\n      event: 'pinch',\n      threshold: 0,\n      pointers: 2\n    }, options)) || this;\n  }\n\n  var _proto = PinchRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_NONE];\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n  };\n\n  _proto.emit = function emit(input) {\n    if (input.scale !== 1) {\n      var inOut = input.scale < 1 ? 'in' : 'out';\n      input.additionalEvent = this.options.event + inOut;\n    }\n\n    _AttrRecognizer.prototype.emit.call(this, input);\n  };\n\n  return PinchRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar RotateRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(RotateRecognizer, _AttrRecognizer);\n\n  function RotateRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _AttrRecognizer.call(this, _extends({\n      event: 'rotate',\n      threshold: 0,\n      pointers: 2\n    }, options)) || this;\n  }\n\n  var _proto = RotateRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_NONE];\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n  };\n\n  return RotateRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\n\nvar PressRecognizer =\n/*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(PressRecognizer, _Recognizer);\n\n  function PressRecognizer(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _Recognizer.call(this, _extends({\n      event: 'press',\n      pointers: 1,\n      time: 251,\n      // minimal time of the pointer to be pressed\n      threshold: 9\n    }, options)) || this;\n    _this._timer = null;\n    _this._input = null;\n    return _this;\n  }\n\n  var _proto = PressRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_AUTO];\n  };\n\n  _proto.process = function process(input) {\n    var _this2 = this;\n\n    var options = this.options;\n    var validPointers = input.pointers.length === options.pointers;\n    var validMovement = input.distance < options.threshold;\n    var validTime = input.deltaTime > options.time;\n    this._input = input; // we only allow little movement\n    // and we've reached an end event, so a tap is possible\n\n    if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {\n      this.reset();\n    } else if (input.eventType & INPUT_START) {\n      this.reset();\n      this._timer = setTimeout(function () {\n        _this2.state = STATE_RECOGNIZED;\n\n        _this2.tryEmit();\n      }, options.time);\n    } else if (input.eventType & INPUT_END) {\n      return STATE_RECOGNIZED;\n    }\n\n    return STATE_FAILED;\n  };\n\n  _proto.reset = function reset() {\n    clearTimeout(this._timer);\n  };\n\n  _proto.emit = function emit(input) {\n    if (this.state !== STATE_RECOGNIZED) {\n      return;\n    }\n\n    if (input && input.eventType & INPUT_END) {\n      this.manager.emit(this.options.event + \"up\", input);\n    } else {\n      this._input.timeStamp = now();\n      this.manager.emit(this.options.event, this._input);\n    }\n  };\n\n  return PressRecognizer;\n}(Recognizer);\n\nvar defaults = {\n  /**\n   * @private\n   * set if DOM events are being triggered.\n   * But this is slower and unused by simple implementations, so disabled by default.\n   * @type {Boolean}\n   * @default false\n   */\n  domEvents: false,\n\n  /**\n   * @private\n   * The value for the touchAction property/fallback.\n   * When set to `compute` it will magically set the correct value based on the added recognizers.\n   * @type {String}\n   * @default compute\n   */\n  touchAction: TOUCH_ACTION_COMPUTE,\n\n  /**\n   * @private\n   * @type {Boolean}\n   * @default true\n   */\n  enable: true,\n\n  /**\n   * @private\n   * EXPERIMENTAL FEATURE -- can be removed/changed\n   * Change the parent input target element.\n   * If Null, then it is being set the to main element.\n   * @type {Null|EventTarget}\n   * @default null\n   */\n  inputTarget: null,\n\n  /**\n   * @private\n   * force an input class\n   * @type {Null|Function}\n   * @default null\n   */\n  inputClass: null,\n\n  /**\n   * @private\n   * Some CSS properties can be used to improve the working of Hammer.\n   * Add them to this method and they will be set when creating a new Manager.\n   * @namespace\n   */\n  cssProps: {\n    /**\n     * @private\n     * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n     * @type {String}\n     * @default 'none'\n     */\n    userSelect: \"none\",\n\n    /**\n     * @private\n     * Disable the Windows Phone grippers when pressing an element.\n     * @type {String}\n     * @default 'none'\n     */\n    touchSelect: \"none\",\n\n    /**\n     * @private\n     * Disables the default callout shown when you touch and hold a touch target.\n     * On iOS, when you touch and hold a touch target such as a link, Safari displays\n     * a callout containing information about the link. This property allows you to disable that callout.\n     * @type {String}\n     * @default 'none'\n     */\n    touchCallout: \"none\",\n\n    /**\n     * @private\n     * Specifies whether zooming is enabled. Used by IE10>\n     * @type {String}\n     * @default 'none'\n     */\n    contentZooming: \"none\",\n\n    /**\n     * @private\n     * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n     * @type {String}\n     * @default 'none'\n     */\n    userDrag: \"none\",\n\n    /**\n     * @private\n     * Overrides the highlight color shown when the user taps a link or a JavaScript\n     * clickable element in iOS. This property obeys the alpha value, if specified.\n     * @type {String}\n     * @default 'rgba(0,0,0,0)'\n     */\n    tapHighlightColor: \"rgba(0,0,0,0)\"\n  }\n};\n/**\n * @private\n * Default recognizer setup when calling `Hammer()`\n * When creating a new Manager these will be skipped.\n * This is separated with other defaults because of tree-shaking.\n * @type {Array}\n */\n\nvar preset = [[RotateRecognizer, {\n  enable: false\n}], [PinchRecognizer, {\n  enable: false\n}, ['rotate']], [SwipeRecognizer, {\n  direction: DIRECTION_HORIZONTAL\n}], [PanRecognizer, {\n  direction: DIRECTION_HORIZONTAL\n}, ['swipe']], [TapRecognizer], [TapRecognizer, {\n  event: 'doubletap',\n  taps: 2\n}, ['tap']], [PressRecognizer]];\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n/**\n * @private\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\n\nfunction toggleCssProps(manager, add) {\n  var element = manager.element;\n\n  if (!element.style) {\n    return;\n  }\n\n  var prop;\n  each(manager.options.cssProps, function (value, name) {\n    prop = prefixed(element.style, name);\n\n    if (add) {\n      manager.oldCssProps[prop] = element.style[prop];\n      element.style[prop] = value;\n    } else {\n      element.style[prop] = manager.oldCssProps[prop] || \"\";\n    }\n  });\n\n  if (!add) {\n    manager.oldCssProps = {};\n  }\n}\n/**\n * @private\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\n\n\nfunction triggerDomEvent(event, data) {\n  var gestureEvent = document.createEvent(\"Event\");\n  gestureEvent.initEvent(event, true, true);\n  gestureEvent.gesture = data;\n  data.target.dispatchEvent(gestureEvent);\n}\n/**\n* @private\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\n\n\nvar Manager =\n/*#__PURE__*/\nfunction () {\n  function Manager(element, options) {\n    var _this = this;\n\n    this.options = assign$1({}, defaults, options || {});\n    this.options.inputTarget = this.options.inputTarget || element;\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n    toggleCssProps(this, true);\n    each(this.options.recognizers, function (item) {\n      var recognizer = _this.add(new item[0](item[1]));\n\n      item[2] && recognizer.recognizeWith(item[2]);\n      item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n  }\n  /**\n   * @private\n   * set options\n   * @param {Object} options\n   * @returns {Manager}\n   */\n\n\n  var _proto = Manager.prototype;\n\n  _proto.set = function set(options) {\n    assign$1(this.options, options); // Options that need a little more setup\n\n    if (options.touchAction) {\n      this.touchAction.update();\n    }\n\n    if (options.inputTarget) {\n      // Clean up existing event listeners and reinitialize\n      this.input.destroy();\n      this.input.target = options.inputTarget;\n      this.input.init();\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * stop recognizing for this session.\n   * This session will be discarded, when a new [input]start event is fired.\n   * When forced, the recognizer cycle is stopped immediately.\n   * @param {Boolean} [force]\n   */\n\n\n  _proto.stop = function stop(force) {\n    this.session.stopped = force ? FORCED_STOP : STOP;\n  };\n  /**\n   * @private\n   * run the recognizers!\n   * called by the inputHandler function on every movement of the pointers (touches)\n   * it walks through all the recognizers and tries to detect the gesture that is being made\n   * @param {Object} inputData\n   */\n\n\n  _proto.recognize = function recognize(inputData) {\n    var session = this.session;\n\n    if (session.stopped) {\n      return;\n    } // run the touch-action polyfill\n\n\n    this.touchAction.preventDefaults(inputData);\n    var recognizer;\n    var recognizers = this.recognizers; // this holds the recognizer that is being recognized.\n    // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n    // if no recognizer is detecting a thing, it is set to `null`\n\n    var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized\n    // or when we're in a new session\n\n    if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {\n      session.curRecognizer = null;\n      curRecognizer = null;\n    }\n\n    var i = 0;\n\n    while (i < recognizers.length) {\n      recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.\n      // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n      // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n      //      that is being recognized.\n      // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n      //      this can be setup with the `recognizeWith()` method on the recognizer.\n\n      if (session.stopped !== FORCED_STOP && ( // 1\n      !curRecognizer || recognizer === curRecognizer || // 2\n      recognizer.canRecognizeWith(curRecognizer))) {\n        // 3\n        recognizer.recognize(inputData);\n      } else {\n        recognizer.reset();\n      } // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n      // current active recognizer. but only if we don't already have an active recognizer\n\n\n      if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n        session.curRecognizer = recognizer;\n        curRecognizer = recognizer;\n      }\n\n      i++;\n    }\n  };\n  /**\n   * @private\n   * get a recognizer by its event name.\n   * @param {Recognizer|String} recognizer\n   * @returns {Recognizer|Null}\n   */\n\n\n  _proto.get = function get(recognizer) {\n    if (recognizer instanceof Recognizer) {\n      return recognizer;\n    }\n\n    var recognizers = this.recognizers;\n\n    for (var i = 0; i < recognizers.length; i++) {\n      if (recognizers[i].options.event === recognizer) {\n        return recognizers[i];\n      }\n    }\n\n    return null;\n  };\n  /**\n   * @private add a recognizer to the manager\n   * existing recognizers with the same event name will be removed\n   * @param {Recognizer} recognizer\n   * @returns {Recognizer|Manager}\n   */\n\n\n  _proto.add = function add(recognizer) {\n    if (invokeArrayArg(recognizer, \"add\", this)) {\n      return this;\n    } // remove existing\n\n\n    var existing = this.get(recognizer.options.event);\n\n    if (existing) {\n      this.remove(existing);\n    }\n\n    this.recognizers.push(recognizer);\n    recognizer.manager = this;\n    this.touchAction.update();\n    return recognizer;\n  };\n  /**\n   * @private\n   * remove a recognizer by name or instance\n   * @param {Recognizer|String} recognizer\n   * @returns {Manager}\n   */\n\n\n  _proto.remove = function remove(recognizer) {\n    if (invokeArrayArg(recognizer, \"remove\", this)) {\n      return this;\n    }\n\n    var targetRecognizer = this.get(recognizer); // let's make sure this recognizer exists\n\n    if (recognizer) {\n      var recognizers = this.recognizers;\n      var index = inArray(recognizers, targetRecognizer);\n\n      if (index !== -1) {\n        recognizers.splice(index, 1);\n        this.touchAction.update();\n      }\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * bind event\n   * @param {String} events\n   * @param {Function} handler\n   * @returns {EventEmitter} this\n   */\n\n\n  _proto.on = function on(events, handler) {\n    if (events === undefined || handler === undefined) {\n      return this;\n    }\n\n    var handlers = this.handlers;\n    each(splitStr(events), function (event) {\n      handlers[event] = handlers[event] || [];\n      handlers[event].push(handler);\n    });\n    return this;\n  };\n  /**\n   * @private unbind event, leave emit blank to remove all handlers\n   * @param {String} events\n   * @param {Function} [handler]\n   * @returns {EventEmitter} this\n   */\n\n\n  _proto.off = function off(events, handler) {\n    if (events === undefined) {\n      return this;\n    }\n\n    var handlers = this.handlers;\n    each(splitStr(events), function (event) {\n      if (!handler) {\n        delete handlers[event];\n      } else {\n        handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n      }\n    });\n    return this;\n  };\n  /**\n   * @private emit event to the listeners\n   * @param {String} event\n   * @param {Object} data\n   */\n\n\n  _proto.emit = function emit(event, data) {\n    // we also want to trigger dom events\n    if (this.options.domEvents) {\n      triggerDomEvent(event, data);\n    } // no handlers, so skip it all\n\n\n    var handlers = this.handlers[event] && this.handlers[event].slice();\n\n    if (!handlers || !handlers.length) {\n      return;\n    }\n\n    data.type = event;\n\n    data.preventDefault = function () {\n      data.srcEvent.preventDefault();\n    };\n\n    var i = 0;\n\n    while (i < handlers.length) {\n      handlers[i](data);\n      i++;\n    }\n  };\n  /**\n   * @private\n   * destroy the manager and unbinds all events\n   * it doesn't unbind dom events, that is the user own responsibility\n   */\n\n\n  _proto.destroy = function destroy() {\n    this.element && toggleCssProps(this, false);\n    this.handlers = {};\n    this.session = {};\n    this.input.destroy();\n    this.element = null;\n  };\n\n  return Manager;\n}();\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n  touchstart: INPUT_START,\n  touchmove: INPUT_MOVE,\n  touchend: INPUT_END,\n  touchcancel: INPUT_CANCEL\n};\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n/**\n * @private\n * Touch events input\n * @constructor\n * @extends Input\n */\n\nvar SingleTouchInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(SingleTouchInput, _Input);\n\n  function SingleTouchInput() {\n    var _this;\n\n    var proto = SingleTouchInput.prototype;\n    proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.started = false;\n    return _this;\n  }\n\n  var _proto = SingleTouchInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?\n\n    if (type === INPUT_START) {\n      this.started = true;\n    }\n\n    if (!this.started) {\n      return;\n    }\n\n    var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state\n\n    if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n      this.started = false;\n    }\n\n    this.callback(this.manager, type, {\n      pointers: touches[0],\n      changedPointers: touches[1],\n      pointerType: INPUT_TYPE_TOUCH,\n      srcEvent: ev\n    });\n  };\n\n  return SingleTouchInput;\n}(Input);\n\nfunction normalizeSingleTouches(ev, type) {\n  var all = toArray(ev.touches);\n  var changed = toArray(ev.changedTouches);\n\n  if (type & (INPUT_END | INPUT_CANCEL)) {\n    all = uniqueArray(all.concat(changed), 'identifier', true);\n  }\n\n  return [all, changed];\n}\n\n/**\n * @private\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n  var deprecationMessage = \"DEPRECATED METHOD: \" + name + \"\\n\" + message + \" AT \\n\";\n  return function () {\n    var e = new Error('get-stack-trace');\n    var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n    var log = window.console && (window.console.warn || window.console.log);\n\n    if (log) {\n      log.call(window.console, deprecationMessage, stack);\n    }\n\n    return method.apply(this, arguments);\n  };\n}\n\n/**\n * @private\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\n\nvar extend = deprecate(function (dest, src, merge) {\n  var keys = Object.keys(src);\n  var i = 0;\n\n  while (i < keys.length) {\n    if (!merge || merge && dest[keys[i]] === undefined) {\n      dest[keys[i]] = src[keys[i]];\n    }\n\n    i++;\n  }\n\n  return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * @private\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\n\nvar merge = deprecate(function (dest, src) {\n  return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * @private\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\n\nfunction inherit(child, base, properties) {\n  var baseP = base.prototype;\n  var childP;\n  childP = child.prototype = Object.create(baseP);\n  childP.constructor = child;\n  childP._super = baseP;\n\n  if (properties) {\n    assign$1(childP, properties);\n  }\n}\n\n/**\n * @private\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n  return function boundFn() {\n    return fn.apply(context, arguments);\n  };\n}\n\n/**\n * @private\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\n\nvar Hammer =\n/*#__PURE__*/\nfunction () {\n  var Hammer =\n  /**\n    * @private\n    * @const {string}\n    */\n  function Hammer(element, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return new Manager(element, _extends({\n      recognizers: preset.concat()\n    }, options));\n  };\n\n  Hammer.VERSION = \"2.0.17-rc\";\n  Hammer.DIRECTION_ALL = DIRECTION_ALL;\n  Hammer.DIRECTION_DOWN = DIRECTION_DOWN;\n  Hammer.DIRECTION_LEFT = DIRECTION_LEFT;\n  Hammer.DIRECTION_RIGHT = DIRECTION_RIGHT;\n  Hammer.DIRECTION_UP = DIRECTION_UP;\n  Hammer.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;\n  Hammer.DIRECTION_VERTICAL = DIRECTION_VERTICAL;\n  Hammer.DIRECTION_NONE = DIRECTION_NONE;\n  Hammer.DIRECTION_DOWN = DIRECTION_DOWN;\n  Hammer.INPUT_START = INPUT_START;\n  Hammer.INPUT_MOVE = INPUT_MOVE;\n  Hammer.INPUT_END = INPUT_END;\n  Hammer.INPUT_CANCEL = INPUT_CANCEL;\n  Hammer.STATE_POSSIBLE = STATE_POSSIBLE;\n  Hammer.STATE_BEGAN = STATE_BEGAN;\n  Hammer.STATE_CHANGED = STATE_CHANGED;\n  Hammer.STATE_ENDED = STATE_ENDED;\n  Hammer.STATE_RECOGNIZED = STATE_RECOGNIZED;\n  Hammer.STATE_CANCELLED = STATE_CANCELLED;\n  Hammer.STATE_FAILED = STATE_FAILED;\n  Hammer.Manager = Manager;\n  Hammer.Input = Input;\n  Hammer.TouchAction = TouchAction;\n  Hammer.TouchInput = TouchInput;\n  Hammer.MouseInput = MouseInput;\n  Hammer.PointerEventInput = PointerEventInput;\n  Hammer.TouchMouseInput = TouchMouseInput;\n  Hammer.SingleTouchInput = SingleTouchInput;\n  Hammer.Recognizer = Recognizer;\n  Hammer.AttrRecognizer = AttrRecognizer;\n  Hammer.Tap = TapRecognizer;\n  Hammer.Pan = PanRecognizer;\n  Hammer.Swipe = SwipeRecognizer;\n  Hammer.Pinch = PinchRecognizer;\n  Hammer.Rotate = RotateRecognizer;\n  Hammer.Press = PressRecognizer;\n  Hammer.on = addEventListeners;\n  Hammer.off = removeEventListeners;\n  Hammer.each = each;\n  Hammer.merge = merge;\n  Hammer.extend = extend;\n  Hammer.bindFn = bindFn;\n  Hammer.assign = assign$1;\n  Hammer.inherit = inherit;\n  Hammer.bindFn = bindFn;\n  Hammer.prefixed = prefixed;\n  Hammer.toArray = toArray;\n  Hammer.inArray = inArray;\n  Hammer.uniqueArray = uniqueArray;\n  Hammer.splitStr = splitStr;\n  Hammer.boolOrFn = boolOrFn;\n  Hammer.hasParent = hasParent;\n  Hammer.addEventListeners = addEventListeners;\n  Hammer.removeEventListeners = removeEventListeners;\n  Hammer.defaults = assign$1({}, defaults, {\n    preset: preset\n  });\n  return Hammer;\n}();\n\n//  style loader but by script tag, not by the loader.\n\nvar defaults$1 = Hammer.defaults;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Hammer);\n\n//# sourceMappingURL=hammer.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@egjs/hammerjs/dist/hammer.esm.js\n")},"./node_modules/@egjs/imready/dist/imready.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@egjs/imready/dist/imready.esm.js ***!
  \********************************************************/
/*! exports provided: default, EVENTS, ImageLoader, Loader, Manager, PROPS, VideoLoader */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EVENTS", function() { return EVENTS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageLoader", function() { return ImageLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Loader", function() { return Loader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Manager", function() { return ImReadyManager; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PROPS", function() { return PROPS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoLoader", function() { return VideoLoader; });\n/* harmony import */ var _egjs_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @egjs/component */ "./node_modules/@egjs/component/dist/component.esm.js");\n/*\nCopyright (c) 2020-present NAVER Corp.\nname: @egjs/imready\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-imready\nversion: 1.3.0\n*/\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n}\n\n/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nvar isWindow = typeof window !== "undefined";\nvar ua = isWindow ? window.navigator.userAgent : "";\nvar SUPPORT_COMPUTEDSTYLE = isWindow ? !!("getComputedStyle" in window) : false;\nvar IS_IE = /MSIE|Trident|Windows Phone|Edge/.test(ua);\nvar SUPPORT_ADDEVENTLISTENER = isWindow ? !!("addEventListener" in document) : false;\nvar WIDTH = "width";\nvar HEIGHT = "height";\nvar PROPS = ["prefix", "loaders"];\nvar EVENTS = ["preReadyElement", "readyElement", "error", "preReady", "ready"];\n\nfunction getAttribute(el, name) {\n  return el.getAttribute(name) || "";\n}\nfunction toArray(arr) {\n  return [].slice.call(arr);\n}\nfunction hasSizeAttribute(target, prefix) {\n  if (prefix === void 0) {\n    prefix = "data-";\n  }\n\n  return !!target.getAttribute(prefix + "width");\n}\nfunction hasLoadingAttribute(target, prefix) {\n  if (prefix === void 0) {\n    prefix = "data-";\n  }\n\n  return "loading" in target && target.getAttribute("loading") === "lazy" || !!target.getAttribute(prefix + "lazy");\n}\nfunction hasSkipAttribute(target, prefix) {\n  if (prefix === void 0) {\n    prefix = "data-";\n  }\n\n  return !!target.getAttribute(prefix + "skip");\n}\nfunction addEvent(element, type, handler) {\n  if (SUPPORT_ADDEVENTLISTENER) {\n    element.addEventListener(type, handler, false);\n  } else if (element.attachEvent) {\n    element.attachEvent("on" + type, handler);\n  } else {\n    element["on" + type] = handler;\n  }\n}\nfunction removeEvent(element, type, handler) {\n  if (element.removeEventListener) {\n    element.removeEventListener(type, handler, false);\n  } else if (element.detachEvent) {\n    element.detachEvent("on" + type, handler);\n  } else {\n    element["on" + type] = null;\n  }\n}\nfunction innerWidth(el) {\n  return getSize(el, "Width");\n}\nfunction innerHeight(el) {\n  return getSize(el, "Height");\n}\nfunction getStyles(el) {\n  return (SUPPORT_COMPUTEDSTYLE ? window.getComputedStyle(el) : el.currentStyle) || {};\n}\n\nfunction getSize(el, name) {\n  var size = el["client" + name] || el["offset" + name];\n  return parseFloat(size || getStyles(el)[name.toLowerCase()]) || 0;\n}\n\nfunction getContentElements(element, tags, prefix) {\n  var skipElements = toArray(element.querySelectorAll(__spreadArrays(["[" + prefix + "skip] [" + prefix + "width]"], tags.map(function (tag) {\n    return ["[" + prefix + "skip] " + tag, tag + "[" + prefix + "skip]", "[" + prefix + "width] " + tag].join(", ");\n  })).join(", ")));\n  return toArray(element.querySelectorAll("[" + prefix + "width], " + tags.join(", "))).filter(function (el) {\n    return skipElements.indexOf(el) === -1;\n  });\n}\n\n/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nvar elements = [];\nfunction addAutoSizer(element, prefix) {\n  !elements.length && addEvent(window, "resize", resizeAllAutoSizers);\n  element.__PREFIX__ = prefix;\n  elements.push(element);\n  resize(element);\n}\nfunction removeAutoSizer(element, prefix) {\n  var index = elements.indexOf(element);\n\n  if (index < 0) {\n    return;\n  }\n\n  var fixed = getAttribute(element, prefix + "fixed");\n  delete element.__PREFIX__;\n  element.style[fixed === HEIGHT ? WIDTH : HEIGHT] = "";\n  elements.splice(index, 1);\n  !elements.length && removeEvent(window, "resize", resizeAllAutoSizers);\n}\n\nfunction resize(element, prefix) {\n  if (prefix === void 0) {\n    prefix = "data-";\n  }\n\n  var elementPrefix = element.__PREFIX__ || prefix;\n  var dataWidth = parseInt(getAttribute(element, "" + elementPrefix + WIDTH), 10) || 0;\n  var dataHeight = parseInt(getAttribute(element, "" + elementPrefix + HEIGHT), 10) || 0;\n  var fixed = getAttribute(element, elementPrefix + "fixed");\n\n  if (fixed === HEIGHT) {\n    var size = innerHeight(element) || dataHeight;\n    element.style[WIDTH] = dataWidth / dataHeight * size + "px";\n  } else {\n    var size = innerWidth(element) || dataWidth;\n    element.style[HEIGHT] = dataHeight / dataWidth * size + "px";\n  }\n}\n\nfunction resizeAllAutoSizers() {\n  elements.forEach(function (element) {\n    resize(element);\n  });\n}\n\nvar Loader =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(Loader, _super);\n\n  function Loader(element, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.isReady = false;\n    _this.isPreReady = false;\n    _this.hasDataSize = false;\n    _this.hasLoading = false;\n    _this.isSkip = false;\n\n    _this.onCheck = function (e) {\n      _this.clear();\n\n      if (e && e.type === "error") {\n        _this.onError(_this.element);\n      }\n\n      if (_this.hasLoading && _this.checkElement()) {\n        // I\'m not ready\n        return;\n      } // I\'m pre-ready and ready!\n\n\n      var withPreReady = !_this.hasDataSize && !_this.hasLoading;\n\n      _this.onReady(withPreReady);\n    };\n\n    _this.options = __assign({\n      prefix: "data-"\n    }, options);\n    _this.element = element;\n    var prefix = _this.options.prefix;\n    _this.hasDataSize = hasSizeAttribute(element, prefix);\n    _this.isSkip = hasSkipAttribute(element, prefix);\n    _this.hasLoading = hasLoadingAttribute(element, prefix);\n    return _this;\n  }\n\n  var __proto = Loader.prototype;\n\n  __proto.check = function () {\n    if (this.isSkip || !this.checkElement()) {\n      // I\'m Ready\n      this.onAlreadyReady(true);\n      return false;\n    }\n\n    if (this.hasDataSize) {\n      addAutoSizer(this.element, this.options.prefix);\n    }\n\n    if (this.hasDataSize || this.hasLoading) {\n      // I\'m Pre Ready\n      this.onAlreadyPreReady();\n    } // Wati Pre Ready, Ready\n\n\n    return true;\n  };\n\n  __proto.addEvents = function () {\n    var _this = this;\n\n    var element = this.element;\n    this.constructor.EVENTS.forEach(function (name) {\n      addEvent(element, name, _this.onCheck);\n    });\n  };\n\n  __proto.clear = function () {\n    var _this = this;\n\n    var element = this.element;\n    this.constructor.EVENTS.forEach(function (name) {\n      removeEvent(element, name, _this.onCheck);\n    });\n    this.removeAutoSizer();\n  };\n\n  __proto.destroy = function () {\n    this.clear();\n    this.off();\n  };\n\n  __proto.removeAutoSizer = function () {\n    if (this.hasDataSize) {\n      // I\'m already ready.\n      var prefix = this.options.prefix;\n      removeAutoSizer(this.element, prefix);\n    }\n  };\n\n  __proto.onError = function (target) {\n    this.trigger("error", {\n      element: this.element,\n      target: target\n    });\n  };\n\n  __proto.onPreReady = function () {\n    if (this.isPreReady) {\n      return;\n    }\n\n    this.isPreReady = true;\n    this.trigger("preReady", {\n      element: this.element,\n      hasLoading: this.hasLoading,\n      isSkip: this.isSkip\n    });\n  };\n\n  __proto.onReady = function (withPreReady) {\n    if (this.isReady) {\n      return;\n    }\n\n    withPreReady = !this.isPreReady && withPreReady;\n\n    if (withPreReady) {\n      this.isPreReady = true;\n    }\n\n    this.removeAutoSizer();\n    this.isReady = true;\n    this.trigger("ready", {\n      element: this.element,\n      withPreReady: withPreReady,\n      hasLoading: this.hasLoading,\n      isSkip: this.isSkip\n    });\n  };\n\n  __proto.onAlreadyError = function (target) {\n    var _this = this;\n\n    setTimeout(function () {\n      _this.onError(target);\n    });\n  };\n\n  __proto.onAlreadyPreReady = function () {\n    var _this = this;\n\n    setTimeout(function () {\n      _this.onPreReady();\n    });\n  };\n\n  __proto.onAlreadyReady = function (withPreReady) {\n    var _this = this;\n\n    setTimeout(function () {\n      _this.onReady(withPreReady);\n    });\n  };\n\n  Loader.EVENTS = [];\n  return Loader;\n}(_egjs_component__WEBPACK_IMPORTED_MODULE_0__["default"]);\n\nvar ElementLoader =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(ElementLoader, _super);\n\n  function ElementLoader() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  var __proto = ElementLoader.prototype;\n\n  __proto.setHasLoading = function (hasLoading) {\n    this.hasLoading = hasLoading;\n  };\n\n  __proto.check = function () {\n    if (this.isSkip) {\n      // I\'m Ready\n      this.onAlreadyReady(true);\n      return false;\n    }\n\n    if (this.hasDataSize) {\n      addAutoSizer(this.element, this.options.prefix);\n      this.onAlreadyPreReady();\n    } else {\n      // has not data size\n      this.trigger("requestChildren");\n    }\n\n    return true;\n  };\n\n  __proto.checkElement = function () {\n    return true;\n  };\n\n  __proto.destroy = function () {\n    this.clear();\n    this.trigger("requestDestroy");\n    this.off();\n  };\n\n  __proto.onAlreadyPreReady = function () {\n    // has data size\n    _super.prototype.onAlreadyPreReady.call(this);\n\n    this.trigger("reqeustReadyChildren");\n  };\n\n  ElementLoader.EVENTS = [];\n  return ElementLoader;\n}(Loader);\n\n/**\n * @alias eg.ImReady\n * @extends eg.Component\n */\n\nvar ImReadyManager =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(ImReadyManager, _super);\n  /**\n   * @param - ImReady\'s options\n   */\n\n\n  function ImReadyManager(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.readyCount = 0;\n    _this.preReadyCount = 0;\n    _this.totalCount = 0;\n    _this.totalErrorCount = 0;\n    _this.isPreReadyOver = true;\n    _this.elementInfos = [];\n    _this.options = __assign({\n      loaders: {},\n      prefix: "data-"\n    }, options);\n    return _this;\n  }\n  /**\n   * Checks whether elements are in the ready state.\n   * @ko 엘리먼트가 준비 상태인지 체크한다.\n   * @elements - Elements to check ready status. <ko> 준비 상태를 체크할 엘리먼트들.</ko>\n   * @example\n     * ```html\n     * <div>\n     *    <img src="./1.jpg" data-width="1280" data-height="853" style="width:100%"/>\n     *    <img src="./2.jpg" data-width="1280" data-height="853"/>\n     *    <img src="ERR" data-width="1280" data-height="853"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from "@egjs/imready";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll("img")).on({\n     *   preReadyElement: e => {\n     *     // 1, 3\n     *     // 2, 3\n     *     // 3, 3\n     *     console.log(e.preReadyCount, e.totalCount),\n     *   },\n     * });\n     * ```\n   */\n\n\n  var __proto = ImReadyManager.prototype;\n\n  __proto.check = function (elements) {\n    var _this = this;\n\n    var prefix = this.options.prefix;\n    this.clear();\n    this.elementInfos = toArray(elements).map(function (element, index) {\n      var loader = _this.getLoader(element, {\n        prefix: prefix\n      });\n\n      loader.check();\n      loader.on("error", function (e) {\n        _this.onError(index, e.target);\n      }).on("preReady", function (e) {\n        var info = _this.elementInfos[index];\n        info.hasLoading = e.hasLoading;\n        info.isSkip = e.isSkip;\n\n        var isPreReady = _this.checkPreReady(index);\n\n        _this.onPreReadyElement(index);\n\n        isPreReady && _this.onPreReady();\n      }).on("ready", function (_a) {\n        var withPreReady = _a.withPreReady,\n            hasLoading = _a.hasLoading,\n            isSkip = _a.isSkip;\n        var info = _this.elementInfos[index];\n        info.hasLoading = hasLoading;\n        info.isSkip = isSkip;\n\n        var isPreReady = withPreReady && _this.checkPreReady(index);\n\n        var isReady = _this.checkReady(index); // Pre-ready and ready occur simultaneously\n\n\n        withPreReady && _this.onPreReadyElement(index);\n\n        _this.onReadyElement(index);\n\n        isPreReady && _this.onPreReady();\n        isReady && _this.onReady();\n      });\n      return {\n        loader: loader,\n        element: element,\n        hasLoading: false,\n        hasError: false,\n        isPreReady: false,\n        isReady: false,\n        isSkip: false\n      };\n    });\n    var length = this.elementInfos.length;\n    this.totalCount = length;\n\n    if (!length) {\n      setTimeout(function () {\n        _this.onPreReady();\n\n        _this.onReady();\n      });\n    }\n\n    return this;\n  };\n  /**\n   * Gets the total count of elements to be checked.\n   * @ko 체크하는 element의 총 개수를 가져온다.\n   */\n\n\n  __proto.getTotalCount = function () {\n    return this.totalCount;\n  };\n  /**\n   * Whether the elements are all pre-ready. (all sizes are known)\n   * @ko 엘리먼트들이 모두 사전 준비가 됐는지 (사이즈를 전부 알 수 있는지) 여부.\n   */\n\n\n  __proto.isPreReady = function () {\n    return this.elementInfos.every(function (info) {\n      return info.isPreReady;\n    });\n  };\n  /**\n   * Whether the elements are all ready.\n   * @ko 엘리먼트들이 모두 준비가 됐는지 여부.\n   */\n\n\n  __proto.isReady = function () {\n    return this.elementInfos.every(function (info) {\n      return info.isReady;\n    });\n  };\n  /**\n   * Whether an error has occurred in the elements in the current state.\n   * @ko 현재 상태에서 엘리먼트들이 에러가 발생했는지 여부.\n   */\n\n\n  __proto.hasError = function () {\n    return this.totalErrorCount > 0;\n  };\n  /**\n   * Clears events of elements being checked.\n   * @ko 체크 중인 엘리먼트들의 이벤트를 해제 한다.\n   */\n\n\n  __proto.clear = function () {\n    this.isPreReadyOver = false;\n    this.totalCount = 0;\n    this.preReadyCount = 0;\n    this.readyCount = 0;\n    this.totalErrorCount = 0;\n    this.elementInfos.forEach(function (info) {\n      if (!info.isReady && info.loader) {\n        info.loader.destroy();\n      }\n    });\n    this.elementInfos = [];\n  };\n  /**\n   * Destory all events.\n   * @ko 모든 이벤트를 해제 한다.\n   */\n\n\n  __proto.destroy = function () {\n    this.clear();\n    this.off();\n  };\n\n  __proto.getLoader = function (element, options) {\n    var _this = this;\n\n    var tagName = element.tagName.toLowerCase();\n    var loaders = this.options.loaders;\n    var prefix = options.prefix;\n    var tags = Object.keys(loaders);\n\n    if (loaders[tagName]) {\n      return new loaders[tagName](element, options);\n    }\n\n    var loader = new ElementLoader(element, options);\n    var children = toArray(element.querySelectorAll(tags.join(", ")));\n    loader.setHasLoading(children.some(function (el) {\n      return hasLoadingAttribute(el, prefix);\n    }));\n    var withPreReady = false;\n    var childrenImReady = this.clone().on("error", function (e) {\n      loader.onError(e.target);\n    }).on("ready", function () {\n      loader.onReady(withPreReady);\n    });\n    loader.on("requestChildren", function () {\n      // has not data size\n      var contentElements = getContentElements(element, tags, _this.options.prefix);\n      childrenImReady.check(contentElements).on("preReady", function (e) {\n        withPreReady = e.isReady;\n\n        if (!withPreReady) {\n          loader.onPreReady();\n        }\n      });\n    }).on("reqeustReadyChildren", function () {\n      // has data size\n      // loader call preReady\n      // check only video, image elements\n      childrenImReady.check(children);\n    }).on("requestDestroy", function () {\n      childrenImReady.destroy();\n    });\n    return loader;\n  };\n\n  __proto.clone = function () {\n    return new ImReadyManager(__assign({}, this.options));\n  };\n\n  __proto.checkPreReady = function (index) {\n    this.elementInfos[index].isPreReady = true;\n    ++this.preReadyCount;\n\n    if (this.preReadyCount < this.totalCount) {\n      return false;\n    }\n\n    return true;\n  };\n\n  __proto.checkReady = function (index) {\n    this.elementInfos[index].isReady = true;\n    ++this.readyCount;\n\n    if (this.readyCount < this.totalCount) {\n      return false;\n    }\n\n    return true;\n  };\n\n  __proto.onError = function (index, target) {\n    var info = this.elementInfos[index];\n    info.hasError = true;\n    /**\n     * An event occurs if the image, video fails to load.\n     * @ko 이미지, 비디오가 로딩에 실패하면 이벤트가 발생한다.\n     * @event eg.ImReady#error\n     * @param {eg.ImReady.OnError} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src="./1.jpg" data-width="1280" data-height="853" style="width:100%"/>\n     *    <img src="./2.jpg"/>\n     *    <img src="ERR"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from "@egjs/imready";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check([document.querySelector("div")]).on({\n     *   error: e => {\n     *     // <div>...</div>, 0, <img src="ERR"/>\n     *     console.log(e.element, e.index, e.target),\n     *   },\n     * });\n     * ```\n     */\n\n    this.trigger(new _egjs_component__WEBPACK_IMPORTED_MODULE_0__["ComponentEvent"]("error", {\n      element: info.element,\n      index: index,\n      target: target,\n      errorCount: this.getErrorCount(),\n      totalErrorCount: ++this.totalErrorCount\n    }));\n  };\n\n  __proto.onPreReadyElement = function (index) {\n    var info = this.elementInfos[index];\n    /**\n     * An event occurs when the element is pre-ready (when the loading attribute is applied or the size is known)\n     * @ko 해당 엘리먼트가 사전 준비되었을 때(loading 속성이 적용되었거나 사이즈를 알 수 있을 때) 이벤트가 발생한다.\n     * @event eg.ImReady#preReadyElement\n     * @param {eg.ImReady.OnPreReadyElement} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src="./1.jpg" data-width="1280" data-height="853" style="width:100%"/>\n     *    <img src="./2.jpg" data-width="1280" data-height="853"/>\n     *    <img src="ERR" data-width="1280" data-height="853"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from "@egjs/imready";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll("img")).on({\n     *   preReadyElement: e => {\n     *     // 1, 3\n     *     // 2, 3\n     *     // 3, 3\n     *     console.log(e.preReadyCount, e.totalCount),\n     *   },\n     * });\n     * ```\n     */\n\n    this.trigger(new _egjs_component__WEBPACK_IMPORTED_MODULE_0__["ComponentEvent"]("preReadyElement", {\n      element: info.element,\n      index: index,\n      preReadyCount: this.preReadyCount,\n      readyCount: this.readyCount,\n      totalCount: this.totalCount,\n      isPreReady: this.isPreReady(),\n      isReady: this.isReady(),\n      hasLoading: info.hasLoading,\n      isSkip: info.isSkip\n    }));\n  };\n\n  __proto.onPreReady = function () {\n    this.isPreReadyOver = true;\n    /**\n     * An event occurs when all element are pre-ready (When all elements have the loading attribute applied or the size is known)\n     * @ko 모든 엘리먼트들이 사전 준비된 경우 (모든 엘리먼트들이 loading 속성이 적용되었거나 사이즈를 알 수 있는 경우) 이벤트가 발생한다.\n     * @event eg.ImReady#preReady\n     * @param {eg.ImReady.OnPreReady} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src="./1.jpg" data-width="1280" data-height="853" style="width:100%"/>\n     *    <img src="./2.jpg" data-width="1280" data-height="853"/>\n     *    <img src="ERR" data-width="1280" data-height="853"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from "@egjs/imready";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll("img")).on({\n     *   preReady: e => {\n     *     // 0, 3\n     *     console.log(e.readyCount, e.totalCount),\n     *   },\n     * });\n     * ```\n     */\n\n    this.trigger(new _egjs_component__WEBPACK_IMPORTED_MODULE_0__["ComponentEvent"]("preReady", {\n      readyCount: this.readyCount,\n      totalCount: this.totalCount,\n      isReady: this.isReady(),\n      hasLoading: this.hasLoading()\n    }));\n  };\n\n  __proto.onReadyElement = function (index) {\n    var info = this.elementInfos[index];\n    /**\n     * An event occurs when the element is ready\n     * @ko 해당 엘리먼트가 준비가 되었을 때 이벤트가 발생한다.\n     * @event eg.ImReady#readyElement\n     * @param {eg.ImReady.OnReadyElement} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src="./1.jpg" data-width="1280" data-height="853" style="width:100%"/>\n     *    <img src="./2.jpg" data-width="1280" data-height="853"/>\n     *    <img src="ERR" data-width="1280" data-height="853"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from "@egjs/imready";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll("img")).on({\n     *   readyElement: e => {\n     *     // 1, 0, false, 3\n     *     // 2, 1, false, 3\n     *     // 3, 2, true, 3\n     *     console.log(e.readyCount, e.index, e.hasError, e.totalCount),\n     *   },\n     * });\n     * ```\n     */\n\n    this.trigger(new _egjs_component__WEBPACK_IMPORTED_MODULE_0__["ComponentEvent"]("readyElement", {\n      index: index,\n      element: info.element,\n      hasError: info.hasError,\n      errorCount: this.getErrorCount(),\n      totalErrorCount: this.totalErrorCount,\n      preReadyCount: this.preReadyCount,\n      readyCount: this.readyCount,\n      totalCount: this.totalCount,\n      isPreReady: this.isPreReady(),\n      isReady: this.isReady(),\n      hasLoading: info.hasLoading,\n      isPreReadyOver: this.isPreReadyOver,\n      isSkip: info.isSkip\n    }));\n  };\n\n  __proto.onReady = function () {\n    /**\n     * An event occurs when all element are ready\n     * @ko 모든 엘리먼트들이 준비된 경우 이벤트가 발생한다.\n     * @event eg.ImReady#ready\n     * @param {eg.ImReady.OnReady} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src="./1.jpg" data-width="1280" data-height="853" style="width:100%"/>\n     *    <img src="./2.jpg" data-width="1280" data-height="853"/>\n     *    <img src="ERR" data-width="1280" data-height="853"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from "@egjs/imready";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll("img")).on({\n     *   preReady: e => {\n     *     // 0, 3\n     *     console.log(e.readyCount, e.totalCount),\n     *   },\n     *   ready: e => {\n     *     // 1, 3\n     *     console.log(e.errorCount, e.totalCount),\n     *   },\n     * });\n     * ```\n     */\n    this.trigger(new _egjs_component__WEBPACK_IMPORTED_MODULE_0__["ComponentEvent"]("ready", {\n      errorCount: this.getErrorCount(),\n      totalErrorCount: this.totalErrorCount,\n      totalCount: this.totalCount\n    }));\n  };\n\n  __proto.getErrorCount = function () {\n    return this.elementInfos.filter(function (info) {\n      return info.hasError;\n    }).length;\n  };\n\n  __proto.hasLoading = function () {\n    return this.elementInfos.some(function (info) {\n      return info.hasLoading;\n    });\n  };\n\n  return ImReadyManager;\n}(_egjs_component__WEBPACK_IMPORTED_MODULE_0__["default"]);\n\nvar ImageLoader =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(ImageLoader, _super);\n\n  function ImageLoader() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  var __proto = ImageLoader.prototype;\n\n  __proto.checkElement = function () {\n    var element = this.element;\n    var src = element.getAttribute("src");\n\n    if (element.complete) {\n      if (src) {\n        // complete\n        if (!element.naturalWidth) {\n          this.onAlreadyError(element);\n        }\n\n        return false;\n      } else {\n        // Using an external lazy loading module\n        this.onAlreadyPreReady();\n      }\n    }\n\n    this.addEvents();\n    IS_IE && element.setAttribute("src", src);\n    return true;\n  };\n\n  ImageLoader.EVENTS = ["load", "error"];\n  return ImageLoader;\n}(Loader);\n\nvar VideoLoader =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(VideoLoader, _super);\n\n  function VideoLoader() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  var __proto = VideoLoader.prototype;\n\n  __proto.checkElement = function () {\n    var element = this.element; // HAVE_NOTHING: 0, no information whether or not the audio/video is ready\n    // HAVE_METADATA: 1, HAVE_METADATA - metadata for the audio/video is ready\n    // HAVE_CURRENT_DATA: 2, data for the current playback position is available, but not enough data to play next frame/millisecond\n    // HAVE_FUTURE_DATA: 3, data for the current and at least the next frame is available\n    // HAVE_ENOUGH_DATA: 4, enough data available to start playing\n\n    if (element.readyState >= 1) {\n      return false;\n    }\n\n    if (element.error) {\n      this.onAlreadyError(element);\n      return false;\n    }\n\n    this.addEvents();\n    return true;\n  };\n\n  VideoLoader.EVENTS = ["loadedmetadata", "error"];\n  return VideoLoader;\n}(Loader);\n\nvar ImReady =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(ImReady, _super);\n\n  function ImReady(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _super.call(this, __assign({\n      loaders: {\n        img: ImageLoader,\n        video: VideoLoader\n      }\n    }, options)) || this;\n  }\n\n  return ImReady;\n}(ImReadyManager);\n\n/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\n\n/* harmony default export */ __webpack_exports__["default"] = (ImReady);\n\n//# sourceMappingURL=imready.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGVnanMvaW1yZWFkeS9kaXN0L2ltcmVhZHkuZXNtLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlZ2pzL2ltcmVhZHkvZGlzdC9pbXJlYWR5LmVzbS5qcz8xOGIxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgKGMpIDIwMjAtcHJlc2VudCBOQVZFUiBDb3JwLlxubmFtZTogQGVnanMvaW1yZWFkeVxubGljZW5zZTogTUlUXG5hdXRob3I6IE5BVkVSIENvcnAuXG5yZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vbmF2ZXIvZWdqcy1pbXJlYWR5XG52ZXJzaW9uOiAxLjMuMFxuKi9cbmltcG9ydCBDb21wb25lbnQsIHsgQ29tcG9uZW50RXZlbnQgfSBmcm9tICdAZWdqcy9jb21wb25lbnQnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IHtcbiAgICBfX3Byb3RvX186IFtdXG4gIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikge1xuICAgIGQuX19wcm90b19fID0gYjtcbiAgfSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07XG4gIH07XG5cbiAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG59O1xuXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xuICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuXG4gIGZ1bmN0aW9uIF9fKCkge1xuICAgIHRoaXMuY29uc3RydWN0b3IgPSBkO1xuICB9XG5cbiAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufVxudmFyIF9fYXNzaWduID0gZnVuY3Rpb24gKCkge1xuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5mdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcbiAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG5cbiAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKSBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKykgcltrXSA9IGFbal07XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qXG5lZ2pzLWltcmVhZHlcbkNvcHlyaWdodCAoYykgMjAyMC1wcmVzZW50IE5BVkVSIENvcnAuXG5NSVQgbGljZW5zZVxuKi9cbnZhciBpc1dpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG52YXIgdWEgPSBpc1dpbmRvdyA/IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50IDogXCJcIjtcbnZhciBTVVBQT1JUX0NPTVBVVEVEU1RZTEUgPSBpc1dpbmRvdyA/ICEhKFwiZ2V0Q29tcHV0ZWRTdHlsZVwiIGluIHdpbmRvdykgOiBmYWxzZTtcbnZhciBJU19JRSA9IC9NU0lFfFRyaWRlbnR8V2luZG93cyBQaG9uZXxFZGdlLy50ZXN0KHVhKTtcbnZhciBTVVBQT1JUX0FEREVWRU5UTElTVEVORVIgPSBpc1dpbmRvdyA/ICEhKFwiYWRkRXZlbnRMaXN0ZW5lclwiIGluIGRvY3VtZW50KSA6IGZhbHNlO1xudmFyIFdJRFRIID0gXCJ3aWR0aFwiO1xudmFyIEhFSUdIVCA9IFwiaGVpZ2h0XCI7XG52YXIgUFJPUFMgPSBbXCJwcmVmaXhcIiwgXCJsb2FkZXJzXCJdO1xudmFyIEVWRU5UUyA9IFtcInByZVJlYWR5RWxlbWVudFwiLCBcInJlYWR5RWxlbWVudFwiLCBcImVycm9yXCIsIFwicHJlUmVhZHlcIiwgXCJyZWFkeVwiXTtcblxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlKGVsLCBuYW1lKSB7XG4gIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUobmFtZSkgfHwgXCJcIjtcbn1cbmZ1bmN0aW9uIHRvQXJyYXkoYXJyKSB7XG4gIHJldHVybiBbXS5zbGljZS5jYWxsKGFycik7XG59XG5mdW5jdGlvbiBoYXNTaXplQXR0cmlidXRlKHRhcmdldCwgcHJlZml4KSB7XG4gIGlmIChwcmVmaXggPT09IHZvaWQgMCkge1xuICAgIHByZWZpeCA9IFwiZGF0YS1cIjtcbiAgfVxuXG4gIHJldHVybiAhIXRhcmdldC5nZXRBdHRyaWJ1dGUocHJlZml4ICsgXCJ3aWR0aFwiKTtcbn1cbmZ1bmN0aW9uIGhhc0xvYWRpbmdBdHRyaWJ1dGUodGFyZ2V0LCBwcmVmaXgpIHtcbiAgaWYgKHByZWZpeCA9PT0gdm9pZCAwKSB7XG4gICAgcHJlZml4ID0gXCJkYXRhLVwiO1xuICB9XG5cbiAgcmV0dXJuIFwibG9hZGluZ1wiIGluIHRhcmdldCAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwibG9hZGluZ1wiKSA9PT0gXCJsYXp5XCIgfHwgISF0YXJnZXQuZ2V0QXR0cmlidXRlKHByZWZpeCArIFwibGF6eVwiKTtcbn1cbmZ1bmN0aW9uIGhhc1NraXBBdHRyaWJ1dGUodGFyZ2V0LCBwcmVmaXgpIHtcbiAgaWYgKHByZWZpeCA9PT0gdm9pZCAwKSB7XG4gICAgcHJlZml4ID0gXCJkYXRhLVwiO1xuICB9XG5cbiAgcmV0dXJuICEhdGFyZ2V0LmdldEF0dHJpYnV0ZShwcmVmaXggKyBcInNraXBcIik7XG59XG5mdW5jdGlvbiBhZGRFdmVudChlbGVtZW50LCB0eXBlLCBoYW5kbGVyKSB7XG4gIGlmIChTVVBQT1JUX0FEREVWRU5UTElTVEVORVIpIHtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICB9IGVsc2UgaWYgKGVsZW1lbnQuYXR0YWNoRXZlbnQpIHtcbiAgICBlbGVtZW50LmF0dGFjaEV2ZW50KFwib25cIiArIHR5cGUsIGhhbmRsZXIpO1xuICB9IGVsc2Uge1xuICAgIGVsZW1lbnRbXCJvblwiICsgdHlwZV0gPSBoYW5kbGVyO1xuICB9XG59XG5mdW5jdGlvbiByZW1vdmVFdmVudChlbGVtZW50LCB0eXBlLCBoYW5kbGVyKSB7XG4gIGlmIChlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICB9IGVsc2UgaWYgKGVsZW1lbnQuZGV0YWNoRXZlbnQpIHtcbiAgICBlbGVtZW50LmRldGFjaEV2ZW50KFwib25cIiArIHR5cGUsIGhhbmRsZXIpO1xuICB9IGVsc2Uge1xuICAgIGVsZW1lbnRbXCJvblwiICsgdHlwZV0gPSBudWxsO1xuICB9XG59XG5mdW5jdGlvbiBpbm5lcldpZHRoKGVsKSB7XG4gIHJldHVybiBnZXRTaXplKGVsLCBcIldpZHRoXCIpO1xufVxuZnVuY3Rpb24gaW5uZXJIZWlnaHQoZWwpIHtcbiAgcmV0dXJuIGdldFNpemUoZWwsIFwiSGVpZ2h0XCIpO1xufVxuZnVuY3Rpb24gZ2V0U3R5bGVzKGVsKSB7XG4gIHJldHVybiAoU1VQUE9SVF9DT01QVVRFRFNUWUxFID8gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpIDogZWwuY3VycmVudFN0eWxlKSB8fCB7fTtcbn1cblxuZnVuY3Rpb24gZ2V0U2l6ZShlbCwgbmFtZSkge1xuICB2YXIgc2l6ZSA9IGVsW1wiY2xpZW50XCIgKyBuYW1lXSB8fCBlbFtcIm9mZnNldFwiICsgbmFtZV07XG4gIHJldHVybiBwYXJzZUZsb2F0KHNpemUgfHwgZ2V0U3R5bGVzKGVsKVtuYW1lLnRvTG93ZXJDYXNlKCldKSB8fCAwO1xufVxuXG5mdW5jdGlvbiBnZXRDb250ZW50RWxlbWVudHMoZWxlbWVudCwgdGFncywgcHJlZml4KSB7XG4gIHZhciBza2lwRWxlbWVudHMgPSB0b0FycmF5KGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChfX3NwcmVhZEFycmF5cyhbXCJbXCIgKyBwcmVmaXggKyBcInNraXBdIFtcIiArIHByZWZpeCArIFwid2lkdGhdXCJdLCB0YWdzLm1hcChmdW5jdGlvbiAodGFnKSB7XG4gICAgcmV0dXJuIFtcIltcIiArIHByZWZpeCArIFwic2tpcF0gXCIgKyB0YWcsIHRhZyArIFwiW1wiICsgcHJlZml4ICsgXCJza2lwXVwiLCBcIltcIiArIHByZWZpeCArIFwid2lkdGhdIFwiICsgdGFnXS5qb2luKFwiLCBcIik7XG4gIH0pKS5qb2luKFwiLCBcIikpKTtcbiAgcmV0dXJuIHRvQXJyYXkoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW1wiICsgcHJlZml4ICsgXCJ3aWR0aF0sIFwiICsgdGFncy5qb2luKFwiLCBcIikpKS5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7XG4gICAgcmV0dXJuIHNraXBFbGVtZW50cy5pbmRleE9mKGVsKSA9PT0gLTE7XG4gIH0pO1xufVxuXG4vKlxuZWdqcy1pbXJlYWR5XG5Db3B5cmlnaHQgKGMpIDIwMjAtcHJlc2VudCBOQVZFUiBDb3JwLlxuTUlUIGxpY2Vuc2VcbiovXG52YXIgZWxlbWVudHMgPSBbXTtcbmZ1bmN0aW9uIGFkZEF1dG9TaXplcihlbGVtZW50LCBwcmVmaXgpIHtcbiAgIWVsZW1lbnRzLmxlbmd0aCAmJiBhZGRFdmVudCh3aW5kb3csIFwicmVzaXplXCIsIHJlc2l6ZUFsbEF1dG9TaXplcnMpO1xuICBlbGVtZW50Ll9fUFJFRklYX18gPSBwcmVmaXg7XG4gIGVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gIHJlc2l6ZShlbGVtZW50KTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUF1dG9TaXplcihlbGVtZW50LCBwcmVmaXgpIHtcbiAgdmFyIGluZGV4ID0gZWxlbWVudHMuaW5kZXhPZihlbGVtZW50KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGZpeGVkID0gZ2V0QXR0cmlidXRlKGVsZW1lbnQsIHByZWZpeCArIFwiZml4ZWRcIik7XG4gIGRlbGV0ZSBlbGVtZW50Ll9fUFJFRklYX187XG4gIGVsZW1lbnQuc3R5bGVbZml4ZWQgPT09IEhFSUdIVCA/IFdJRFRIIDogSEVJR0hUXSA9IFwiXCI7XG4gIGVsZW1lbnRzLnNwbGljZShpbmRleCwgMSk7XG4gICFlbGVtZW50cy5sZW5ndGggJiYgcmVtb3ZlRXZlbnQod2luZG93LCBcInJlc2l6ZVwiLCByZXNpemVBbGxBdXRvU2l6ZXJzKTtcbn1cblxuZnVuY3Rpb24gcmVzaXplKGVsZW1lbnQsIHByZWZpeCkge1xuICBpZiAocHJlZml4ID09PSB2b2lkIDApIHtcbiAgICBwcmVmaXggPSBcImRhdGEtXCI7XG4gIH1cblxuICB2YXIgZWxlbWVudFByZWZpeCA9IGVsZW1lbnQuX19QUkVGSVhfXyB8fCBwcmVmaXg7XG4gIHZhciBkYXRhV2lkdGggPSBwYXJzZUludChnZXRBdHRyaWJ1dGUoZWxlbWVudCwgXCJcIiArIGVsZW1lbnRQcmVmaXggKyBXSURUSCksIDEwKSB8fCAwO1xuICB2YXIgZGF0YUhlaWdodCA9IHBhcnNlSW50KGdldEF0dHJpYnV0ZShlbGVtZW50LCBcIlwiICsgZWxlbWVudFByZWZpeCArIEhFSUdIVCksIDEwKSB8fCAwO1xuICB2YXIgZml4ZWQgPSBnZXRBdHRyaWJ1dGUoZWxlbWVudCwgZWxlbWVudFByZWZpeCArIFwiZml4ZWRcIik7XG5cbiAgaWYgKGZpeGVkID09PSBIRUlHSFQpIHtcbiAgICB2YXIgc2l6ZSA9IGlubmVySGVpZ2h0KGVsZW1lbnQpIHx8IGRhdGFIZWlnaHQ7XG4gICAgZWxlbWVudC5zdHlsZVtXSURUSF0gPSBkYXRhV2lkdGggLyBkYXRhSGVpZ2h0ICogc2l6ZSArIFwicHhcIjtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2l6ZSA9IGlubmVyV2lkdGgoZWxlbWVudCkgfHwgZGF0YVdpZHRoO1xuICAgIGVsZW1lbnQuc3R5bGVbSEVJR0hUXSA9IGRhdGFIZWlnaHQgLyBkYXRhV2lkdGggKiBzaXplICsgXCJweFwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2l6ZUFsbEF1dG9TaXplcnMoKSB7XG4gIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXNpemUoZWxlbWVudCk7XG4gIH0pO1xufVxuXG52YXIgTG9hZGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgX19leHRlbmRzKExvYWRlciwgX3N1cGVyKTtcblxuICBmdW5jdGlvbiBMb2FkZXIoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaXNSZWFkeSA9IGZhbHNlO1xuICAgIF90aGlzLmlzUHJlUmVhZHkgPSBmYWxzZTtcbiAgICBfdGhpcy5oYXNEYXRhU2l6ZSA9IGZhbHNlO1xuICAgIF90aGlzLmhhc0xvYWRpbmcgPSBmYWxzZTtcbiAgICBfdGhpcy5pc1NraXAgPSBmYWxzZTtcblxuICAgIF90aGlzLm9uQ2hlY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMuY2xlYXIoKTtcblxuICAgICAgaWYgKGUgJiYgZS50eXBlID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgX3RoaXMub25FcnJvcihfdGhpcy5lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLmhhc0xvYWRpbmcgJiYgX3RoaXMuY2hlY2tFbGVtZW50KCkpIHtcbiAgICAgICAgLy8gSSdtIG5vdCByZWFkeVxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEknbSBwcmUtcmVhZHkgYW5kIHJlYWR5IVxuXG5cbiAgICAgIHZhciB3aXRoUHJlUmVhZHkgPSAhX3RoaXMuaGFzRGF0YVNpemUgJiYgIV90aGlzLmhhc0xvYWRpbmc7XG5cbiAgICAgIF90aGlzLm9uUmVhZHkod2l0aFByZVJlYWR5KTtcbiAgICB9O1xuXG4gICAgX3RoaXMub3B0aW9ucyA9IF9fYXNzaWduKHtcbiAgICAgIHByZWZpeDogXCJkYXRhLVwiXG4gICAgfSwgb3B0aW9ucyk7XG4gICAgX3RoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdmFyIHByZWZpeCA9IF90aGlzLm9wdGlvbnMucHJlZml4O1xuICAgIF90aGlzLmhhc0RhdGFTaXplID0gaGFzU2l6ZUF0dHJpYnV0ZShlbGVtZW50LCBwcmVmaXgpO1xuICAgIF90aGlzLmlzU2tpcCA9IGhhc1NraXBBdHRyaWJ1dGUoZWxlbWVudCwgcHJlZml4KTtcbiAgICBfdGhpcy5oYXNMb2FkaW5nID0gaGFzTG9hZGluZ0F0dHJpYnV0ZShlbGVtZW50LCBwcmVmaXgpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfX3Byb3RvID0gTG9hZGVyLnByb3RvdHlwZTtcblxuICBfX3Byb3RvLmNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzU2tpcCB8fCAhdGhpcy5jaGVja0VsZW1lbnQoKSkge1xuICAgICAgLy8gSSdtIFJlYWR5XG4gICAgICB0aGlzLm9uQWxyZWFkeVJlYWR5KHRydWUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhhc0RhdGFTaXplKSB7XG4gICAgICBhZGRBdXRvU2l6ZXIodGhpcy5lbGVtZW50LCB0aGlzLm9wdGlvbnMucHJlZml4KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5oYXNEYXRhU2l6ZSB8fCB0aGlzLmhhc0xvYWRpbmcpIHtcbiAgICAgIC8vIEknbSBQcmUgUmVhZHlcbiAgICAgIHRoaXMub25BbHJlYWR5UHJlUmVhZHkoKTtcbiAgICB9IC8vIFdhdGkgUHJlIFJlYWR5LCBSZWFkeVxuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBfX3Byb3RvLmFkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5FVkVOVFMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgYWRkRXZlbnQoZWxlbWVudCwgbmFtZSwgX3RoaXMub25DaGVjayk7XG4gICAgfSk7XG4gIH07XG5cbiAgX19wcm90by5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5FVkVOVFMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmVtb3ZlRXZlbnQoZWxlbWVudCwgbmFtZSwgX3RoaXMub25DaGVjayk7XG4gICAgfSk7XG4gICAgdGhpcy5yZW1vdmVBdXRvU2l6ZXIoKTtcbiAgfTtcblxuICBfX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHRoaXMub2ZmKCk7XG4gIH07XG5cbiAgX19wcm90by5yZW1vdmVBdXRvU2l6ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaGFzRGF0YVNpemUpIHtcbiAgICAgIC8vIEknbSBhbHJlYWR5IHJlYWR5LlxuICAgICAgdmFyIHByZWZpeCA9IHRoaXMub3B0aW9ucy5wcmVmaXg7XG4gICAgICByZW1vdmVBdXRvU2l6ZXIodGhpcy5lbGVtZW50LCBwcmVmaXgpO1xuICAgIH1cbiAgfTtcblxuICBfX3Byb3RvLm9uRXJyb3IgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGhpcy50cmlnZ2VyKFwiZXJyb3JcIiwge1xuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICB9KTtcbiAgfTtcblxuICBfX3Byb3RvLm9uUHJlUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNQcmVSZWFkeSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaXNQcmVSZWFkeSA9IHRydWU7XG4gICAgdGhpcy50cmlnZ2VyKFwicHJlUmVhZHlcIiwge1xuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgaGFzTG9hZGluZzogdGhpcy5oYXNMb2FkaW5nLFxuICAgICAgaXNTa2lwOiB0aGlzLmlzU2tpcFxuICAgIH0pO1xuICB9O1xuXG4gIF9fcHJvdG8ub25SZWFkeSA9IGZ1bmN0aW9uICh3aXRoUHJlUmVhZHkpIHtcbiAgICBpZiAodGhpcy5pc1JlYWR5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2l0aFByZVJlYWR5ID0gIXRoaXMuaXNQcmVSZWFkeSAmJiB3aXRoUHJlUmVhZHk7XG5cbiAgICBpZiAod2l0aFByZVJlYWR5KSB7XG4gICAgICB0aGlzLmlzUHJlUmVhZHkgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMucmVtb3ZlQXV0b1NpemVyKCk7XG4gICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICB0aGlzLnRyaWdnZXIoXCJyZWFkeVwiLCB7XG4gICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICB3aXRoUHJlUmVhZHk6IHdpdGhQcmVSZWFkeSxcbiAgICAgIGhhc0xvYWRpbmc6IHRoaXMuaGFzTG9hZGluZyxcbiAgICAgIGlzU2tpcDogdGhpcy5pc1NraXBcbiAgICB9KTtcbiAgfTtcblxuICBfX3Byb3RvLm9uQWxyZWFkeUVycm9yID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLm9uRXJyb3IodGFyZ2V0KTtcbiAgICB9KTtcbiAgfTtcblxuICBfX3Byb3RvLm9uQWxyZWFkeVByZVJlYWR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLm9uUHJlUmVhZHkoKTtcbiAgICB9KTtcbiAgfTtcblxuICBfX3Byb3RvLm9uQWxyZWFkeVJlYWR5ID0gZnVuY3Rpb24gKHdpdGhQcmVSZWFkeSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLm9uUmVhZHkod2l0aFByZVJlYWR5KTtcbiAgICB9KTtcbiAgfTtcblxuICBMb2FkZXIuRVZFTlRTID0gW107XG4gIHJldHVybiBMb2FkZXI7XG59KENvbXBvbmVudCk7XG5cbnZhciBFbGVtZW50TG9hZGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgX19leHRlbmRzKEVsZW1lbnRMb2FkZXIsIF9zdXBlcik7XG5cbiAgZnVuY3Rpb24gRWxlbWVudExvYWRlcigpIHtcbiAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX19wcm90byA9IEVsZW1lbnRMb2FkZXIucHJvdG90eXBlO1xuXG4gIF9fcHJvdG8uc2V0SGFzTG9hZGluZyA9IGZ1bmN0aW9uIChoYXNMb2FkaW5nKSB7XG4gICAgdGhpcy5oYXNMb2FkaW5nID0gaGFzTG9hZGluZztcbiAgfTtcblxuICBfX3Byb3RvLmNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzU2tpcCkge1xuICAgICAgLy8gSSdtIFJlYWR5XG4gICAgICB0aGlzLm9uQWxyZWFkeVJlYWR5KHRydWUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhhc0RhdGFTaXplKSB7XG4gICAgICBhZGRBdXRvU2l6ZXIodGhpcy5lbGVtZW50LCB0aGlzLm9wdGlvbnMucHJlZml4KTtcbiAgICAgIHRoaXMub25BbHJlYWR5UHJlUmVhZHkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaGFzIG5vdCBkYXRhIHNpemVcbiAgICAgIHRoaXMudHJpZ2dlcihcInJlcXVlc3RDaGlsZHJlblwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBfX3Byb3RvLmNoZWNrRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBfX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHRoaXMudHJpZ2dlcihcInJlcXVlc3REZXN0cm95XCIpO1xuICAgIHRoaXMub2ZmKCk7XG4gIH07XG5cbiAgX19wcm90by5vbkFscmVhZHlQcmVSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBoYXMgZGF0YSBzaXplXG4gICAgX3N1cGVyLnByb3RvdHlwZS5vbkFscmVhZHlQcmVSZWFkeS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy50cmlnZ2VyKFwicmVxZXVzdFJlYWR5Q2hpbGRyZW5cIik7XG4gIH07XG5cbiAgRWxlbWVudExvYWRlci5FVkVOVFMgPSBbXTtcbiAgcmV0dXJuIEVsZW1lbnRMb2FkZXI7XG59KExvYWRlcik7XG5cbi8qKlxuICogQGFsaWFzIGVnLkltUmVhZHlcbiAqIEBleHRlbmRzIGVnLkNvbXBvbmVudFxuICovXG5cbnZhciBJbVJlYWR5TWFuYWdlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX3N1cGVyKSB7XG4gIF9fZXh0ZW5kcyhJbVJlYWR5TWFuYWdlciwgX3N1cGVyKTtcbiAgLyoqXG4gICAqIEBwYXJhbSAtIEltUmVhZHkncyBvcHRpb25zXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gSW1SZWFkeU1hbmFnZXIob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMucmVhZHlDb3VudCA9IDA7XG4gICAgX3RoaXMucHJlUmVhZHlDb3VudCA9IDA7XG4gICAgX3RoaXMudG90YWxDb3VudCA9IDA7XG4gICAgX3RoaXMudG90YWxFcnJvckNvdW50ID0gMDtcbiAgICBfdGhpcy5pc1ByZVJlYWR5T3ZlciA9IHRydWU7XG4gICAgX3RoaXMuZWxlbWVudEluZm9zID0gW107XG4gICAgX3RoaXMub3B0aW9ucyA9IF9fYXNzaWduKHtcbiAgICAgIGxvYWRlcnM6IHt9LFxuICAgICAgcHJlZml4OiBcImRhdGEtXCJcbiAgICB9LCBvcHRpb25zKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIGVsZW1lbnRzIGFyZSBpbiB0aGUgcmVhZHkgc3RhdGUuXG4gICAqIEBrbyDsl5jrpqzrqLztirjqsIAg7KSA67mEIOyDge2DnOyduOyngCDssrTtgaztlZzri6QuXG4gICAqIEBlbGVtZW50cyAtIEVsZW1lbnRzIHRvIGNoZWNrIHJlYWR5IHN0YXR1cy4gPGtvPiDspIDruYQg7IOB7YOc66W8IOyytO2BrO2VoCDsl5jrpqzrqLztirjrk6QuPC9rbz5cbiAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGRpdj5cbiAgICAgKiAgICA8aW1nIHNyYz1cIi4vMS5qcGdcIiBkYXRhLXdpZHRoPVwiMTI4MFwiIGRhdGEtaGVpZ2h0PVwiODUzXCIgc3R5bGU9XCJ3aWR0aDoxMDAlXCIvPlxuICAgICAqICAgIDxpbWcgc3JjPVwiLi8yLmpwZ1wiIGRhdGEtd2lkdGg9XCIxMjgwXCIgZGF0YS1oZWlnaHQ9XCI4NTNcIi8+XG4gICAgICogICAgPGltZyBzcmM9XCJFUlJcIiBkYXRhLXdpZHRoPVwiMTI4MFwiIGRhdGEtaGVpZ2h0PVwiODUzXCIvPlxuICAgICAqIDwvZGl2PlxuICAgICAqIGBgYFxuICAgICAqICMjIEphdmFzY3JpcHRcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCBJbVJlYWR5IGZyb20gXCJAZWdqcy9pbXJlYWR5XCI7XG4gICAgICpcbiAgICAgKiBjb25zdCBpbSA9IG5ldyBJbVJlYWR5KCk7IC8vIHVtZDogZWcuSW1SZWFkeVxuICAgICAqIGltLmNoZWNrKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbWdcIikpLm9uKHtcbiAgICAgKiAgIHByZVJlYWR5RWxlbWVudDogZSA9PiB7XG4gICAgICogICAgIC8vIDEsIDNcbiAgICAgKiAgICAgLy8gMiwgM1xuICAgICAqICAgICAvLyAzLCAzXG4gICAgICogICAgIGNvbnNvbGUubG9nKGUucHJlUmVhZHlDb3VudCwgZS50b3RhbENvdW50KSxcbiAgICAgKiAgIH0sXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAqL1xuXG5cbiAgdmFyIF9fcHJvdG8gPSBJbVJlYWR5TWFuYWdlci5wcm90b3R5cGU7XG5cbiAgX19wcm90by5jaGVjayA9IGZ1bmN0aW9uIChlbGVtZW50cykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgcHJlZml4ID0gdGhpcy5vcHRpb25zLnByZWZpeDtcbiAgICB0aGlzLmNsZWFyKCk7XG4gICAgdGhpcy5lbGVtZW50SW5mb3MgPSB0b0FycmF5KGVsZW1lbnRzKS5tYXAoZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgICB2YXIgbG9hZGVyID0gX3RoaXMuZ2V0TG9hZGVyKGVsZW1lbnQsIHtcbiAgICAgICAgcHJlZml4OiBwcmVmaXhcbiAgICAgIH0pO1xuXG4gICAgICBsb2FkZXIuY2hlY2soKTtcbiAgICAgIGxvYWRlci5vbihcImVycm9yXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIF90aGlzLm9uRXJyb3IoaW5kZXgsIGUudGFyZ2V0KTtcbiAgICAgIH0pLm9uKFwicHJlUmVhZHlcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIGluZm8gPSBfdGhpcy5lbGVtZW50SW5mb3NbaW5kZXhdO1xuICAgICAgICBpbmZvLmhhc0xvYWRpbmcgPSBlLmhhc0xvYWRpbmc7XG4gICAgICAgIGluZm8uaXNTa2lwID0gZS5pc1NraXA7XG5cbiAgICAgICAgdmFyIGlzUHJlUmVhZHkgPSBfdGhpcy5jaGVja1ByZVJlYWR5KGluZGV4KTtcblxuICAgICAgICBfdGhpcy5vblByZVJlYWR5RWxlbWVudChpbmRleCk7XG5cbiAgICAgICAgaXNQcmVSZWFkeSAmJiBfdGhpcy5vblByZVJlYWR5KCk7XG4gICAgICB9KS5vbihcInJlYWR5XCIsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgd2l0aFByZVJlYWR5ID0gX2Eud2l0aFByZVJlYWR5LFxuICAgICAgICAgICAgaGFzTG9hZGluZyA9IF9hLmhhc0xvYWRpbmcsXG4gICAgICAgICAgICBpc1NraXAgPSBfYS5pc1NraXA7XG4gICAgICAgIHZhciBpbmZvID0gX3RoaXMuZWxlbWVudEluZm9zW2luZGV4XTtcbiAgICAgICAgaW5mby5oYXNMb2FkaW5nID0gaGFzTG9hZGluZztcbiAgICAgICAgaW5mby5pc1NraXAgPSBpc1NraXA7XG5cbiAgICAgICAgdmFyIGlzUHJlUmVhZHkgPSB3aXRoUHJlUmVhZHkgJiYgX3RoaXMuY2hlY2tQcmVSZWFkeShpbmRleCk7XG5cbiAgICAgICAgdmFyIGlzUmVhZHkgPSBfdGhpcy5jaGVja1JlYWR5KGluZGV4KTsgLy8gUHJlLXJlYWR5IGFuZCByZWFkeSBvY2N1ciBzaW11bHRhbmVvdXNseVxuXG5cbiAgICAgICAgd2l0aFByZVJlYWR5ICYmIF90aGlzLm9uUHJlUmVhZHlFbGVtZW50KGluZGV4KTtcblxuICAgICAgICBfdGhpcy5vblJlYWR5RWxlbWVudChpbmRleCk7XG5cbiAgICAgICAgaXNQcmVSZWFkeSAmJiBfdGhpcy5vblByZVJlYWR5KCk7XG4gICAgICAgIGlzUmVhZHkgJiYgX3RoaXMub25SZWFkeSgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsb2FkZXI6IGxvYWRlcixcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgaGFzTG9hZGluZzogZmFsc2UsXG4gICAgICAgIGhhc0Vycm9yOiBmYWxzZSxcbiAgICAgICAgaXNQcmVSZWFkeTogZmFsc2UsXG4gICAgICAgIGlzUmVhZHk6IGZhbHNlLFxuICAgICAgICBpc1NraXA6IGZhbHNlXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmVsZW1lbnRJbmZvcy5sZW5ndGg7XG4gICAgdGhpcy50b3RhbENvdW50ID0gbGVuZ3RoO1xuXG4gICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5vblByZVJlYWR5KCk7XG5cbiAgICAgICAgX3RoaXMub25SZWFkeSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8qKlxuICAgKiBHZXRzIHRoZSB0b3RhbCBjb3VudCBvZiBlbGVtZW50cyB0byBiZSBjaGVja2VkLlxuICAgKiBAa28g7LK07YGs7ZWY64qUIGVsZW1lbnTsnZgg7LSdIOqwnOyImOulvCDqsIDsoLjsmKjri6QuXG4gICAqL1xuXG5cbiAgX19wcm90by5nZXRUb3RhbENvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnRvdGFsQ291bnQ7XG4gIH07XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBlbGVtZW50cyBhcmUgYWxsIHByZS1yZWFkeS4gKGFsbCBzaXplcyBhcmUga25vd24pXG4gICAqIEBrbyDsl5jrpqzrqLztirjrk6TsnbQg66qo65GQIOyCrOyghCDspIDruYTqsIAg65CQ64qU7KeAICjsgqzsnbTspojrpbwg7KCE67aAIOyVjCDsiJgg7J6I64qU7KeAKSDsl6zrtoAuXG4gICAqL1xuXG5cbiAgX19wcm90by5pc1ByZVJlYWR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRJbmZvcy5ldmVyeShmdW5jdGlvbiAoaW5mbykge1xuICAgICAgcmV0dXJuIGluZm8uaXNQcmVSZWFkeTtcbiAgICB9KTtcbiAgfTtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGVsZW1lbnRzIGFyZSBhbGwgcmVhZHkuXG4gICAqIEBrbyDsl5jrpqzrqLztirjrk6TsnbQg66qo65GQIOykgOu5hOqwgCDrkJDripTsp4Ag7Jes67aALlxuICAgKi9cblxuXG4gIF9fcHJvdG8uaXNSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50SW5mb3MuZXZlcnkoZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgIHJldHVybiBpbmZvLmlzUmVhZHk7XG4gICAgfSk7XG4gIH07XG4gIC8qKlxuICAgKiBXaGV0aGVyIGFuIGVycm9yIGhhcyBvY2N1cnJlZCBpbiB0aGUgZWxlbWVudHMgaW4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gICAqIEBrbyDtmITsnqwg7IOB7YOc7JeQ7IScIOyXmOumrOuovO2KuOuTpOydtCDsl5Drn6zqsIAg67Cc7IOd7ZaI64qU7KeAIOyXrOu2gC5cbiAgICovXG5cblxuICBfX3Byb3RvLmhhc0Vycm9yID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnRvdGFsRXJyb3JDb3VudCA+IDA7XG4gIH07XG4gIC8qKlxuICAgKiBDbGVhcnMgZXZlbnRzIG9mIGVsZW1lbnRzIGJlaW5nIGNoZWNrZWQuXG4gICAqIEBrbyDssrTtgawg7KSR7J24IOyXmOumrOuovO2KuOuTpOydmCDsnbTrsqTtirjrpbwg7ZW07KCcIO2VnOuLpC5cbiAgICovXG5cblxuICBfX3Byb3RvLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaXNQcmVSZWFkeU92ZXIgPSBmYWxzZTtcbiAgICB0aGlzLnRvdGFsQ291bnQgPSAwO1xuICAgIHRoaXMucHJlUmVhZHlDb3VudCA9IDA7XG4gICAgdGhpcy5yZWFkeUNvdW50ID0gMDtcbiAgICB0aGlzLnRvdGFsRXJyb3JDb3VudCA9IDA7XG4gICAgdGhpcy5lbGVtZW50SW5mb3MuZm9yRWFjaChmdW5jdGlvbiAoaW5mbykge1xuICAgICAgaWYgKCFpbmZvLmlzUmVhZHkgJiYgaW5mby5sb2FkZXIpIHtcbiAgICAgICAgaW5mby5sb2FkZXIuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuZWxlbWVudEluZm9zID0gW107XG4gIH07XG4gIC8qKlxuICAgKiBEZXN0b3J5IGFsbCBldmVudHMuXG4gICAqIEBrbyDrqqjrk6Ag7J2067Kk7Yq466W8IO2VtOygnCDtlZzri6QuXG4gICAqL1xuXG5cbiAgX19wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgICB0aGlzLm9mZigpO1xuICB9O1xuXG4gIF9fcHJvdG8uZ2V0TG9hZGVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHRhZ05hbWUgPSBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgbG9hZGVycyA9IHRoaXMub3B0aW9ucy5sb2FkZXJzO1xuICAgIHZhciBwcmVmaXggPSBvcHRpb25zLnByZWZpeDtcbiAgICB2YXIgdGFncyA9IE9iamVjdC5rZXlzKGxvYWRlcnMpO1xuXG4gICAgaWYgKGxvYWRlcnNbdGFnTmFtZV0pIHtcbiAgICAgIHJldHVybiBuZXcgbG9hZGVyc1t0YWdOYW1lXShlbGVtZW50LCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICB2YXIgbG9hZGVyID0gbmV3IEVsZW1lbnRMb2FkZXIoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgdmFyIGNoaWxkcmVuID0gdG9BcnJheShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFncy5qb2luKFwiLCBcIikpKTtcbiAgICBsb2FkZXIuc2V0SGFzTG9hZGluZyhjaGlsZHJlbi5zb21lKGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIGhhc0xvYWRpbmdBdHRyaWJ1dGUoZWwsIHByZWZpeCk7XG4gICAgfSkpO1xuICAgIHZhciB3aXRoUHJlUmVhZHkgPSBmYWxzZTtcbiAgICB2YXIgY2hpbGRyZW5JbVJlYWR5ID0gdGhpcy5jbG9uZSgpLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGxvYWRlci5vbkVycm9yKGUudGFyZ2V0KTtcbiAgICB9KS5vbihcInJlYWR5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvYWRlci5vblJlYWR5KHdpdGhQcmVSZWFkeSk7XG4gICAgfSk7XG4gICAgbG9hZGVyLm9uKFwicmVxdWVzdENoaWxkcmVuXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGhhcyBub3QgZGF0YSBzaXplXG4gICAgICB2YXIgY29udGVudEVsZW1lbnRzID0gZ2V0Q29udGVudEVsZW1lbnRzKGVsZW1lbnQsIHRhZ3MsIF90aGlzLm9wdGlvbnMucHJlZml4KTtcbiAgICAgIGNoaWxkcmVuSW1SZWFkeS5jaGVjayhjb250ZW50RWxlbWVudHMpLm9uKFwicHJlUmVhZHlcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgd2l0aFByZVJlYWR5ID0gZS5pc1JlYWR5O1xuXG4gICAgICAgIGlmICghd2l0aFByZVJlYWR5KSB7XG4gICAgICAgICAgbG9hZGVyLm9uUHJlUmVhZHkoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSkub24oXCJyZXFldXN0UmVhZHlDaGlsZHJlblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBoYXMgZGF0YSBzaXplXG4gICAgICAvLyBsb2FkZXIgY2FsbCBwcmVSZWFkeVxuICAgICAgLy8gY2hlY2sgb25seSB2aWRlbywgaW1hZ2UgZWxlbWVudHNcbiAgICAgIGNoaWxkcmVuSW1SZWFkeS5jaGVjayhjaGlsZHJlbik7XG4gICAgfSkub24oXCJyZXF1ZXN0RGVzdHJveVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGlsZHJlbkltUmVhZHkuZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIHJldHVybiBsb2FkZXI7XG4gIH07XG5cbiAgX19wcm90by5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IEltUmVhZHlNYW5hZ2VyKF9fYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMpKTtcbiAgfTtcblxuICBfX3Byb3RvLmNoZWNrUHJlUmVhZHkgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICB0aGlzLmVsZW1lbnRJbmZvc1tpbmRleF0uaXNQcmVSZWFkeSA9IHRydWU7XG4gICAgKyt0aGlzLnByZVJlYWR5Q291bnQ7XG5cbiAgICBpZiAodGhpcy5wcmVSZWFkeUNvdW50IDwgdGhpcy50b3RhbENvdW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgX19wcm90by5jaGVja1JlYWR5ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgdGhpcy5lbGVtZW50SW5mb3NbaW5kZXhdLmlzUmVhZHkgPSB0cnVlO1xuICAgICsrdGhpcy5yZWFkeUNvdW50O1xuXG4gICAgaWYgKHRoaXMucmVhZHlDb3VudCA8IHRoaXMudG90YWxDb3VudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIF9fcHJvdG8ub25FcnJvciA9IGZ1bmN0aW9uIChpbmRleCwgdGFyZ2V0KSB7XG4gICAgdmFyIGluZm8gPSB0aGlzLmVsZW1lbnRJbmZvc1tpbmRleF07XG4gICAgaW5mby5oYXNFcnJvciA9IHRydWU7XG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgb2NjdXJzIGlmIHRoZSBpbWFnZSwgdmlkZW8gZmFpbHMgdG8gbG9hZC5cbiAgICAgKiBAa28g7J2066+47KeALCDruYTrlJTsmKTqsIAg66Gc65Sp7JeQIOyLpO2MqO2VmOuptCDsnbTrsqTtirjqsIAg67Cc7IOd7ZWc64ukLlxuICAgICAqIEBldmVudCBlZy5JbVJlYWR5I2Vycm9yXG4gICAgICogQHBhcmFtIHtlZy5JbVJlYWR5Lk9uRXJyb3J9IGUgLSBUaGUgb2JqZWN0IG9mIGRhdGEgdG8gYmUgc2VudCB0byBhbiBldmVudCA8a28+7J2067Kk7Yq47JeQIOyghOuLrOuQmOuKlCDrjbDsnbTthLAg6rCd7LK0PC9rbz5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8ZGl2PlxuICAgICAqICAgIDxpbWcgc3JjPVwiLi8xLmpwZ1wiIGRhdGEtd2lkdGg9XCIxMjgwXCIgZGF0YS1oZWlnaHQ9XCI4NTNcIiBzdHlsZT1cIndpZHRoOjEwMCVcIi8+XG4gICAgICogICAgPGltZyBzcmM9XCIuLzIuanBnXCIvPlxuICAgICAqICAgIDxpbWcgc3JjPVwiRVJSXCIvPlxuICAgICAqIDwvZGl2PlxuICAgICAqIGBgYFxuICAgICAqICMjIEphdmFzY3JpcHRcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCBJbVJlYWR5IGZyb20gXCJAZWdqcy9pbXJlYWR5XCI7XG4gICAgICpcbiAgICAgKiBjb25zdCBpbSA9IG5ldyBJbVJlYWR5KCk7IC8vIHVtZDogZWcuSW1SZWFkeVxuICAgICAqIGltLmNoZWNrKFtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiZGl2XCIpXSkub24oe1xuICAgICAqICAgZXJyb3I6IGUgPT4ge1xuICAgICAqICAgICAvLyA8ZGl2Pi4uLjwvZGl2PiwgMCwgPGltZyBzcmM9XCJFUlJcIi8+XG4gICAgICogICAgIGNvbnNvbGUubG9nKGUuZWxlbWVudCwgZS5pbmRleCwgZS50YXJnZXQpLFxuICAgICAqICAgfSxcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcihuZXcgQ29tcG9uZW50RXZlbnQoXCJlcnJvclwiLCB7XG4gICAgICBlbGVtZW50OiBpbmZvLmVsZW1lbnQsXG4gICAgICBpbmRleDogaW5kZXgsXG4gICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgIGVycm9yQ291bnQ6IHRoaXMuZ2V0RXJyb3JDb3VudCgpLFxuICAgICAgdG90YWxFcnJvckNvdW50OiArK3RoaXMudG90YWxFcnJvckNvdW50XG4gICAgfSkpO1xuICB9O1xuXG4gIF9fcHJvdG8ub25QcmVSZWFkeUVsZW1lbnQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICB2YXIgaW5mbyA9IHRoaXMuZWxlbWVudEluZm9zW2luZGV4XTtcbiAgICAvKipcbiAgICAgKiBBbiBldmVudCBvY2N1cnMgd2hlbiB0aGUgZWxlbWVudCBpcyBwcmUtcmVhZHkgKHdoZW4gdGhlIGxvYWRpbmcgYXR0cmlidXRlIGlzIGFwcGxpZWQgb3IgdGhlIHNpemUgaXMga25vd24pXG4gICAgICogQGtvIO2VtOuLuSDsl5jrpqzrqLztirjqsIAg7IKs7KCEIOykgOu5hOuQmOyXiOydhCDrlYwobG9hZGluZyDsho3shLHsnbQg7KCB7Jqp65CY7JeI6rGw64KYIOyCrOydtOymiOulvCDslYwg7IiYIOyeiOydhCDrlYwpIOydtOuypO2KuOqwgCDrsJzsg53tlZzri6QuXG4gICAgICogQGV2ZW50IGVnLkltUmVhZHkjcHJlUmVhZHlFbGVtZW50XG4gICAgICogQHBhcmFtIHtlZy5JbVJlYWR5Lk9uUHJlUmVhZHlFbGVtZW50fSBlIC0gVGhlIG9iamVjdCBvZiBkYXRhIHRvIGJlIHNlbnQgdG8gYW4gZXZlbnQgPGtvPuydtOuypO2KuOyXkCDsoITri6zrkJjripQg642w7J207YSwIOqwneyytDwva28+XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGRpdj5cbiAgICAgKiAgICA8aW1nIHNyYz1cIi4vMS5qcGdcIiBkYXRhLXdpZHRoPVwiMTI4MFwiIGRhdGEtaGVpZ2h0PVwiODUzXCIgc3R5bGU9XCJ3aWR0aDoxMDAlXCIvPlxuICAgICAqICAgIDxpbWcgc3JjPVwiLi8yLmpwZ1wiIGRhdGEtd2lkdGg9XCIxMjgwXCIgZGF0YS1oZWlnaHQ9XCI4NTNcIi8+XG4gICAgICogICAgPGltZyBzcmM9XCJFUlJcIiBkYXRhLXdpZHRoPVwiMTI4MFwiIGRhdGEtaGVpZ2h0PVwiODUzXCIvPlxuICAgICAqIDwvZGl2PlxuICAgICAqIGBgYFxuICAgICAqICMjIEphdmFzY3JpcHRcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCBJbVJlYWR5IGZyb20gXCJAZWdqcy9pbXJlYWR5XCI7XG4gICAgICpcbiAgICAgKiBjb25zdCBpbSA9IG5ldyBJbVJlYWR5KCk7IC8vIHVtZDogZWcuSW1SZWFkeVxuICAgICAqIGltLmNoZWNrKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbWdcIikpLm9uKHtcbiAgICAgKiAgIHByZVJlYWR5RWxlbWVudDogZSA9PiB7XG4gICAgICogICAgIC8vIDEsIDNcbiAgICAgKiAgICAgLy8gMiwgM1xuICAgICAqICAgICAvLyAzLCAzXG4gICAgICogICAgIGNvbnNvbGUubG9nKGUucHJlUmVhZHlDb3VudCwgZS50b3RhbENvdW50KSxcbiAgICAgKiAgIH0sXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIobmV3IENvbXBvbmVudEV2ZW50KFwicHJlUmVhZHlFbGVtZW50XCIsIHtcbiAgICAgIGVsZW1lbnQ6IGluZm8uZWxlbWVudCxcbiAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgIHByZVJlYWR5Q291bnQ6IHRoaXMucHJlUmVhZHlDb3VudCxcbiAgICAgIHJlYWR5Q291bnQ6IHRoaXMucmVhZHlDb3VudCxcbiAgICAgIHRvdGFsQ291bnQ6IHRoaXMudG90YWxDb3VudCxcbiAgICAgIGlzUHJlUmVhZHk6IHRoaXMuaXNQcmVSZWFkeSgpLFxuICAgICAgaXNSZWFkeTogdGhpcy5pc1JlYWR5KCksXG4gICAgICBoYXNMb2FkaW5nOiBpbmZvLmhhc0xvYWRpbmcsXG4gICAgICBpc1NraXA6IGluZm8uaXNTa2lwXG4gICAgfSkpO1xuICB9O1xuXG4gIF9fcHJvdG8ub25QcmVSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmlzUHJlUmVhZHlPdmVyID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBBbiBldmVudCBvY2N1cnMgd2hlbiBhbGwgZWxlbWVudCBhcmUgcHJlLXJlYWR5IChXaGVuIGFsbCBlbGVtZW50cyBoYXZlIHRoZSBsb2FkaW5nIGF0dHJpYnV0ZSBhcHBsaWVkIG9yIHRoZSBzaXplIGlzIGtub3duKVxuICAgICAqIEBrbyDrqqjrk6Ag7JeY66as66i87Yq465Ok7J20IOyCrOyghCDspIDruYTrkJwg6rK97JqwICjrqqjrk6Ag7JeY66as66i87Yq465Ok7J20IGxvYWRpbmcg7IaN7ISx7J20IOyggeyaqeuQmOyXiOqxsOuCmCDsgqzsnbTspojrpbwg7JWMIOyImCDsnojripQg6rK97JqwKSDsnbTrsqTtirjqsIAg67Cc7IOd7ZWc64ukLlxuICAgICAqIEBldmVudCBlZy5JbVJlYWR5I3ByZVJlYWR5XG4gICAgICogQHBhcmFtIHtlZy5JbVJlYWR5Lk9uUHJlUmVhZHl9IGUgLSBUaGUgb2JqZWN0IG9mIGRhdGEgdG8gYmUgc2VudCB0byBhbiBldmVudCA8a28+7J2067Kk7Yq47JeQIOyghOuLrOuQmOuKlCDrjbDsnbTthLAg6rCd7LK0PC9rbz5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8ZGl2PlxuICAgICAqICAgIDxpbWcgc3JjPVwiLi8xLmpwZ1wiIGRhdGEtd2lkdGg9XCIxMjgwXCIgZGF0YS1oZWlnaHQ9XCI4NTNcIiBzdHlsZT1cIndpZHRoOjEwMCVcIi8+XG4gICAgICogICAgPGltZyBzcmM9XCIuLzIuanBnXCIgZGF0YS13aWR0aD1cIjEyODBcIiBkYXRhLWhlaWdodD1cIjg1M1wiLz5cbiAgICAgKiAgICA8aW1nIHNyYz1cIkVSUlwiIGRhdGEtd2lkdGg9XCIxMjgwXCIgZGF0YS1oZWlnaHQ9XCI4NTNcIi8+XG4gICAgICogPC9kaXY+XG4gICAgICogYGBgXG4gICAgICogIyMgSmF2YXNjcmlwdFxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IEltUmVhZHkgZnJvbSBcIkBlZ2pzL2ltcmVhZHlcIjtcbiAgICAgKlxuICAgICAqIGNvbnN0IGltID0gbmV3IEltUmVhZHkoKTsgLy8gdW1kOiBlZy5JbVJlYWR5XG4gICAgICogaW0uY2hlY2soZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImltZ1wiKSkub24oe1xuICAgICAqICAgcHJlUmVhZHk6IGUgPT4ge1xuICAgICAqICAgICAvLyAwLCAzXG4gICAgICogICAgIGNvbnNvbGUubG9nKGUucmVhZHlDb3VudCwgZS50b3RhbENvdW50KSxcbiAgICAgKiAgIH0sXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIobmV3IENvbXBvbmVudEV2ZW50KFwicHJlUmVhZHlcIiwge1xuICAgICAgcmVhZHlDb3VudDogdGhpcy5yZWFkeUNvdW50LFxuICAgICAgdG90YWxDb3VudDogdGhpcy50b3RhbENvdW50LFxuICAgICAgaXNSZWFkeTogdGhpcy5pc1JlYWR5KCksXG4gICAgICBoYXNMb2FkaW5nOiB0aGlzLmhhc0xvYWRpbmcoKVxuICAgIH0pKTtcbiAgfTtcblxuICBfX3Byb3RvLm9uUmVhZHlFbGVtZW50ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgdmFyIGluZm8gPSB0aGlzLmVsZW1lbnRJbmZvc1tpbmRleF07XG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgb2NjdXJzIHdoZW4gdGhlIGVsZW1lbnQgaXMgcmVhZHlcbiAgICAgKiBAa28g7ZW064u5IOyXmOumrOuovO2KuOqwgCDspIDruYTqsIAg65CY7JeI7J2EIOuVjCDsnbTrsqTtirjqsIAg67Cc7IOd7ZWc64ukLlxuICAgICAqIEBldmVudCBlZy5JbVJlYWR5I3JlYWR5RWxlbWVudFxuICAgICAqIEBwYXJhbSB7ZWcuSW1SZWFkeS5PblJlYWR5RWxlbWVudH0gZSAtIFRoZSBvYmplY3Qgb2YgZGF0YSB0byBiZSBzZW50IHRvIGFuIGV2ZW50IDxrbz7snbTrsqTtirjsl5Ag7KCE64us65CY64qUIOuNsOydtO2EsCDqsJ3ssrQ8L2tvPlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxkaXY+XG4gICAgICogICAgPGltZyBzcmM9XCIuLzEuanBnXCIgZGF0YS13aWR0aD1cIjEyODBcIiBkYXRhLWhlaWdodD1cIjg1M1wiIHN0eWxlPVwid2lkdGg6MTAwJVwiLz5cbiAgICAgKiAgICA8aW1nIHNyYz1cIi4vMi5qcGdcIiBkYXRhLXdpZHRoPVwiMTI4MFwiIGRhdGEtaGVpZ2h0PVwiODUzXCIvPlxuICAgICAqICAgIDxpbWcgc3JjPVwiRVJSXCIgZGF0YS13aWR0aD1cIjEyODBcIiBkYXRhLWhlaWdodD1cIjg1M1wiLz5cbiAgICAgKiA8L2Rpdj5cbiAgICAgKiBgYGBcbiAgICAgKiAjIyBKYXZhc2NyaXB0XG4gICAgICogYGBganNcbiAgICAgKiBpbXBvcnQgSW1SZWFkeSBmcm9tIFwiQGVnanMvaW1yZWFkeVwiO1xuICAgICAqXG4gICAgICogY29uc3QgaW0gPSBuZXcgSW1SZWFkeSgpOyAvLyB1bWQ6IGVnLkltUmVhZHlcbiAgICAgKiBpbS5jaGVjayhkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW1nXCIpKS5vbih7XG4gICAgICogICByZWFkeUVsZW1lbnQ6IGUgPT4ge1xuICAgICAqICAgICAvLyAxLCAwLCBmYWxzZSwgM1xuICAgICAqICAgICAvLyAyLCAxLCBmYWxzZSwgM1xuICAgICAqICAgICAvLyAzLCAyLCB0cnVlLCAzXG4gICAgICogICAgIGNvbnNvbGUubG9nKGUucmVhZHlDb3VudCwgZS5pbmRleCwgZS5oYXNFcnJvciwgZS50b3RhbENvdW50KSxcbiAgICAgKiAgIH0sXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIobmV3IENvbXBvbmVudEV2ZW50KFwicmVhZHlFbGVtZW50XCIsIHtcbiAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgIGVsZW1lbnQ6IGluZm8uZWxlbWVudCxcbiAgICAgIGhhc0Vycm9yOiBpbmZvLmhhc0Vycm9yLFxuICAgICAgZXJyb3JDb3VudDogdGhpcy5nZXRFcnJvckNvdW50KCksXG4gICAgICB0b3RhbEVycm9yQ291bnQ6IHRoaXMudG90YWxFcnJvckNvdW50LFxuICAgICAgcHJlUmVhZHlDb3VudDogdGhpcy5wcmVSZWFkeUNvdW50LFxuICAgICAgcmVhZHlDb3VudDogdGhpcy5yZWFkeUNvdW50LFxuICAgICAgdG90YWxDb3VudDogdGhpcy50b3RhbENvdW50LFxuICAgICAgaXNQcmVSZWFkeTogdGhpcy5pc1ByZVJlYWR5KCksXG4gICAgICBpc1JlYWR5OiB0aGlzLmlzUmVhZHkoKSxcbiAgICAgIGhhc0xvYWRpbmc6IGluZm8uaGFzTG9hZGluZyxcbiAgICAgIGlzUHJlUmVhZHlPdmVyOiB0aGlzLmlzUHJlUmVhZHlPdmVyLFxuICAgICAgaXNTa2lwOiBpbmZvLmlzU2tpcFxuICAgIH0pKTtcbiAgfTtcblxuICBfX3Byb3RvLm9uUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgb2NjdXJzIHdoZW4gYWxsIGVsZW1lbnQgYXJlIHJlYWR5XG4gICAgICogQGtvIOuqqOuToCDsl5jrpqzrqLztirjrk6TsnbQg7KSA67mE65CcIOqyveyasCDsnbTrsqTtirjqsIAg67Cc7IOd7ZWc64ukLlxuICAgICAqIEBldmVudCBlZy5JbVJlYWR5I3JlYWR5XG4gICAgICogQHBhcmFtIHtlZy5JbVJlYWR5Lk9uUmVhZHl9IGUgLSBUaGUgb2JqZWN0IG9mIGRhdGEgdG8gYmUgc2VudCB0byBhbiBldmVudCA8a28+7J2067Kk7Yq47JeQIOyghOuLrOuQmOuKlCDrjbDsnbTthLAg6rCd7LK0PC9rbz5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8ZGl2PlxuICAgICAqICAgIDxpbWcgc3JjPVwiLi8xLmpwZ1wiIGRhdGEtd2lkdGg9XCIxMjgwXCIgZGF0YS1oZWlnaHQ9XCI4NTNcIiBzdHlsZT1cIndpZHRoOjEwMCVcIi8+XG4gICAgICogICAgPGltZyBzcmM9XCIuLzIuanBnXCIgZGF0YS13aWR0aD1cIjEyODBcIiBkYXRhLWhlaWdodD1cIjg1M1wiLz5cbiAgICAgKiAgICA8aW1nIHNyYz1cIkVSUlwiIGRhdGEtd2lkdGg9XCIxMjgwXCIgZGF0YS1oZWlnaHQ9XCI4NTNcIi8+XG4gICAgICogPC9kaXY+XG4gICAgICogYGBgXG4gICAgICogIyMgSmF2YXNjcmlwdFxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IEltUmVhZHkgZnJvbSBcIkBlZ2pzL2ltcmVhZHlcIjtcbiAgICAgKlxuICAgICAqIGNvbnN0IGltID0gbmV3IEltUmVhZHkoKTsgLy8gdW1kOiBlZy5JbVJlYWR5XG4gICAgICogaW0uY2hlY2soZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImltZ1wiKSkub24oe1xuICAgICAqICAgcHJlUmVhZHk6IGUgPT4ge1xuICAgICAqICAgICAvLyAwLCAzXG4gICAgICogICAgIGNvbnNvbGUubG9nKGUucmVhZHlDb3VudCwgZS50b3RhbENvdW50KSxcbiAgICAgKiAgIH0sXG4gICAgICogICByZWFkeTogZSA9PiB7XG4gICAgICogICAgIC8vIDEsIDNcbiAgICAgKiAgICAgY29uc29sZS5sb2coZS5lcnJvckNvdW50LCBlLnRvdGFsQ291bnQpLFxuICAgICAqICAgfSxcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICB0aGlzLnRyaWdnZXIobmV3IENvbXBvbmVudEV2ZW50KFwicmVhZHlcIiwge1xuICAgICAgZXJyb3JDb3VudDogdGhpcy5nZXRFcnJvckNvdW50KCksXG4gICAgICB0b3RhbEVycm9yQ291bnQ6IHRoaXMudG90YWxFcnJvckNvdW50LFxuICAgICAgdG90YWxDb3VudDogdGhpcy50b3RhbENvdW50XG4gICAgfSkpO1xuICB9O1xuXG4gIF9fcHJvdG8uZ2V0RXJyb3JDb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50SW5mb3MuZmlsdGVyKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICByZXR1cm4gaW5mby5oYXNFcnJvcjtcbiAgICB9KS5sZW5ndGg7XG4gIH07XG5cbiAgX19wcm90by5oYXNMb2FkaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRJbmZvcy5zb21lKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICByZXR1cm4gaW5mby5oYXNMb2FkaW5nO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBJbVJlYWR5TWFuYWdlcjtcbn0oQ29tcG9uZW50KTtcblxudmFyIEltYWdlTG9hZGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgX19leHRlbmRzKEltYWdlTG9hZGVyLCBfc3VwZXIpO1xuXG4gIGZ1bmN0aW9uIEltYWdlTG9hZGVyKCkge1xuICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfX3Byb3RvID0gSW1hZ2VMb2FkZXIucHJvdG90eXBlO1xuXG4gIF9fcHJvdG8uY2hlY2tFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgIHZhciBzcmMgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcInNyY1wiKTtcblxuICAgIGlmIChlbGVtZW50LmNvbXBsZXRlKSB7XG4gICAgICBpZiAoc3JjKSB7XG4gICAgICAgIC8vIGNvbXBsZXRlXG4gICAgICAgIGlmICghZWxlbWVudC5uYXR1cmFsV2lkdGgpIHtcbiAgICAgICAgICB0aGlzLm9uQWxyZWFkeUVycm9yKGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVXNpbmcgYW4gZXh0ZXJuYWwgbGF6eSBsb2FkaW5nIG1vZHVsZVxuICAgICAgICB0aGlzLm9uQWxyZWFkeVByZVJlYWR5KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hZGRFdmVudHMoKTtcbiAgICBJU19JRSAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZShcInNyY1wiLCBzcmMpO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIEltYWdlTG9hZGVyLkVWRU5UUyA9IFtcImxvYWRcIiwgXCJlcnJvclwiXTtcbiAgcmV0dXJuIEltYWdlTG9hZGVyO1xufShMb2FkZXIpO1xuXG52YXIgVmlkZW9Mb2FkZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9zdXBlcikge1xuICBfX2V4dGVuZHMoVmlkZW9Mb2FkZXIsIF9zdXBlcik7XG5cbiAgZnVuY3Rpb24gVmlkZW9Mb2FkZXIoKSB7XG4gICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9fcHJvdG8gPSBWaWRlb0xvYWRlci5wcm90b3R5cGU7XG5cbiAgX19wcm90by5jaGVja0VsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7IC8vIEhBVkVfTk9USElORzogMCwgbm8gaW5mb3JtYXRpb24gd2hldGhlciBvciBub3QgdGhlIGF1ZGlvL3ZpZGVvIGlzIHJlYWR5XG4gICAgLy8gSEFWRV9NRVRBREFUQTogMSwgSEFWRV9NRVRBREFUQSAtIG1ldGFkYXRhIGZvciB0aGUgYXVkaW8vdmlkZW8gaXMgcmVhZHlcbiAgICAvLyBIQVZFX0NVUlJFTlRfREFUQTogMiwgZGF0YSBmb3IgdGhlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb24gaXMgYXZhaWxhYmxlLCBidXQgbm90IGVub3VnaCBkYXRhIHRvIHBsYXkgbmV4dCBmcmFtZS9taWxsaXNlY29uZFxuICAgIC8vIEhBVkVfRlVUVVJFX0RBVEE6IDMsIGRhdGEgZm9yIHRoZSBjdXJyZW50IGFuZCBhdCBsZWFzdCB0aGUgbmV4dCBmcmFtZSBpcyBhdmFpbGFibGVcbiAgICAvLyBIQVZFX0VOT1VHSF9EQVRBOiA0LCBlbm91Z2ggZGF0YSBhdmFpbGFibGUgdG8gc3RhcnQgcGxheWluZ1xuXG4gICAgaWYgKGVsZW1lbnQucmVhZHlTdGF0ZSA+PSAxKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQuZXJyb3IpIHtcbiAgICAgIHRoaXMub25BbHJlYWR5RXJyb3IoZWxlbWVudCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5hZGRFdmVudHMoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBWaWRlb0xvYWRlci5FVkVOVFMgPSBbXCJsb2FkZWRtZXRhZGF0YVwiLCBcImVycm9yXCJdO1xuICByZXR1cm4gVmlkZW9Mb2FkZXI7XG59KExvYWRlcik7XG5cbnZhciBJbVJlYWR5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgX19leHRlbmRzKEltUmVhZHksIF9zdXBlcik7XG5cbiAgZnVuY3Rpb24gSW1SZWFkeShvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBfX2Fzc2lnbih7XG4gICAgICBsb2FkZXJzOiB7XG4gICAgICAgIGltZzogSW1hZ2VMb2FkZXIsXG4gICAgICAgIHZpZGVvOiBWaWRlb0xvYWRlclxuICAgICAgfVxuICAgIH0sIG9wdGlvbnMpKSB8fCB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIEltUmVhZHk7XG59KEltUmVhZHlNYW5hZ2VyKTtcblxuLypcbmVnanMtaW1yZWFkeVxuQ29weXJpZ2h0IChjKSAyMDIwLXByZXNlbnQgTkFWRVIgQ29ycC5cbk1JVCBsaWNlbnNlXG4qL1xuXG5leHBvcnQgZGVmYXVsdCBJbVJlYWR5O1xuZXhwb3J0IHsgRVZFTlRTLCBJbWFnZUxvYWRlciwgTG9hZGVyLCBJbVJlYWR5TWFuYWdlciBhcyBNYW5hZ2VyLCBQUk9QUywgVmlkZW9Mb2FkZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltcmVhZHkuZXNtLmpzLm1hcFxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@egjs/imready/dist/imready.esm.js\n')},"./node_modules/@egjs/list-differ/dist/list-differ.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@egjs/list-differ/dist/list-differ.esm.js ***!
  \****************************************************************/
/*! exports provided: default, diff */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diff", function() { return diff; });\n/*\nCopyright (c) 2019-present NAVER Corp.\nname: @egjs/list-differ\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-list-differ\nversion: 1.0.0\n*/\n/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nvar PolyMap =\n/*#__PURE__*/\nfunction () {\n  function PolyMap() {\n    this.keys = [];\n    this.values = [];\n  }\n\n  var __proto = PolyMap.prototype;\n\n  __proto.get = function (key) {\n    return this.values[this.keys.indexOf(key)];\n  };\n\n  __proto.set = function (key, value) {\n    var keys = this.keys;\n    var values = this.values;\n    var prevIndex = keys.indexOf(key);\n    var index = prevIndex === -1 ? keys.length : prevIndex;\n    keys[index] = key;\n    values[index] = value;\n  };\n\n  return PolyMap;\n}();\n\n/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nvar HashMap =\n/*#__PURE__*/\nfunction () {\n  function HashMap() {\n    this.object = {};\n  }\n\n  var __proto = HashMap.prototype;\n\n  __proto.get = function (key) {\n    return this.object[key];\n  };\n\n  __proto.set = function (key, value) {\n    this.object[key] = value;\n  };\n\n  return HashMap;\n}();\n\n/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nvar SUPPORT_MAP = typeof Map === "function";\n\n/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nvar Link =\n/*#__PURE__*/\nfunction () {\n  function Link() {}\n\n  var __proto = Link.prototype;\n\n  __proto.connect = function (prevLink, nextLink) {\n    this.prev = prevLink;\n    this.next = nextLink;\n    prevLink && (prevLink.next = this);\n    nextLink && (nextLink.prev = this);\n  };\n\n  __proto.disconnect = function () {\n    // In double linked list, diconnect the interconnected relationship.\n    var prevLink = this.prev;\n    var nextLink = this.next;\n    prevLink && (prevLink.next = nextLink);\n    nextLink && (nextLink.prev = prevLink);\n  };\n\n  __proto.getIndex = function () {\n    var link = this;\n    var index = -1;\n\n    while (link) {\n      link = link.prev;\n      ++index;\n    }\n\n    return index;\n  };\n\n  return Link;\n}();\n\n/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\n\nfunction orderChanged(changed, fixed) {\n  // It is roughly in the order of these examples.\n  // 4, 6, 0, 2, 1, 3, 5, 7\n  var fromLinks = []; // 0, 1, 2, 3, 4, 5, 6, 7\n\n  var toLinks = [];\n  changed.forEach(function (_a) {\n    var from = _a[0],\n        to = _a[1];\n    var link = new Link();\n    fromLinks[from] = link;\n    toLinks[to] = link;\n  }); // `fromLinks` are connected to each other by double linked list.\n\n  fromLinks.forEach(function (link, i) {\n    link.connect(fromLinks[i - 1]);\n  });\n  return changed.filter(function (_, i) {\n    return !fixed[i];\n  }).map(function (_a, i) {\n    var from = _a[0],\n        to = _a[1];\n\n    if (from === to) {\n      return [0, 0];\n    }\n\n    var fromLink = fromLinks[from];\n    var toLink = toLinks[to - 1];\n    var fromIndex = fromLink.getIndex(); // Disconnect the link connected to `fromLink`.\n\n    fromLink.disconnect(); // Connect `fromLink` to the right of `toLink`.\n\n    if (!toLink) {\n      fromLink.connect(undefined, fromLinks[0]);\n    } else {\n      fromLink.connect(toLink, toLink.next);\n    }\n\n    var toIndex = fromLink.getIndex();\n    return [fromIndex, toIndex];\n  });\n}\n\nvar Result =\n/*#__PURE__*/\nfunction () {\n  function Result(prevList, list, added, removed, changed, maintained, changedBeforeAdded, fixed) {\n    this.prevList = prevList;\n    this.list = list;\n    this.added = added;\n    this.removed = removed;\n    this.changed = changed;\n    this.maintained = maintained;\n    this.changedBeforeAdded = changedBeforeAdded;\n    this.fixed = fixed;\n  }\n\n  var __proto = Result.prototype;\n  Object.defineProperty(__proto, "ordered", {\n    get: function () {\n      if (!this.cacheOrdered) {\n        this.caculateOrdered();\n      }\n\n      return this.cacheOrdered;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(__proto, "pureChanged", {\n    get: function () {\n      if (!this.cachePureChanged) {\n        this.caculateOrdered();\n      }\n\n      return this.cachePureChanged;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __proto.caculateOrdered = function () {\n    var ordered = orderChanged(this.changedBeforeAdded, this.fixed);\n    var changed = this.changed;\n    var pureChanged = [];\n    this.cacheOrdered = ordered.filter(function (_a, i) {\n      var from = _a[0],\n          to = _a[1];\n      var _b = changed[i],\n          fromBefore = _b[0],\n          toBefore = _b[1];\n\n      if (from !== to) {\n        pureChanged.push([fromBefore, toBefore]);\n        return true;\n      }\n    });\n    this.cachePureChanged = pureChanged;\n  };\n\n  return Result;\n}();\n\n/**\n *\n * @memberof eg.ListDiffer\n * @static\n * @function\n * @param - Previous List <ko> 이전 목록 </ko>\n * @param - List to Update <ko> 업데이트 할 목록 </ko>\n * @param - This callback function returns the key of the item. <ko> 아이템의 키를 반환하는 콜백 함수입니다.</ko>\n * @return - Returns the diff between `prevList` and `list` <ko> `prevList`와 `list`의 다른 점을 반환한다.</ko>\n * @example\n * import { diff } from "@egjs/list-differ";\n * // script => eg.ListDiffer.diff\n * const result = diff([0, 1, 2, 3, 4, 5], [7, 8, 0, 4, 3, 6, 2, 1], e => e);\n * // List before update\n * // [1, 2, 3, 4, 5]\n * console.log(result.prevList);\n * // Updated list\n * // [4, 3, 6, 2, 1]\n * console.log(result.list);\n * // Index array of values added to `list`\n * // [0, 1, 5]\n * console.log(result.added);\n * // Index array of values removed in `prevList`\n * // [5]\n * console.log(result.removed);\n * // An array of index pairs of `prevList` and `list` with different indexes from `prevList` and `list`\n * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n * console.log(result.changed);\n * // The subset of `changed` and an array of index pairs that moved data directly. Indicate an array of absolute index pairs of `ordered`.(Formatted by: Array<[index of prevList, index of list]>)\n * // [[4, 3], [3, 4], [2, 6]]\n * console.log(result.pureChanged);\n * // An array of index pairs to be `ordered` that can synchronize `list` before adding data. (Formatted by: Array<[prevIndex, nextIndex]>)\n * // [[4, 1], [4, 2], [4, 3]]\n * console.log(result.ordered);\n * // An array of index pairs of `prevList` and `list` that have not been added/removed so data is preserved\n * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n * console.log(result.maintained);\n */\n\nfunction diff(prevList, list, findKeyCallback) {\n  var mapClass = SUPPORT_MAP ? Map : findKeyCallback ? HashMap : PolyMap;\n\n  var callback = findKeyCallback || function (e) {\n    return e;\n  };\n\n  var added = [];\n  var removed = [];\n  var maintained = [];\n  var prevKeys = prevList.map(callback);\n  var keys = list.map(callback);\n  var prevKeyMap = new mapClass();\n  var keyMap = new mapClass();\n  var changedBeforeAdded = [];\n  var fixed = [];\n  var removedMap = {};\n  var changed = [];\n  var addedCount = 0;\n  var removedCount = 0; // Add prevKeys and keys to the hashmap.\n\n  prevKeys.forEach(function (key, prevListIndex) {\n    prevKeyMap.set(key, prevListIndex);\n  });\n  keys.forEach(function (key, listIndex) {\n    keyMap.set(key, listIndex);\n  }); // Compare `prevKeys` and `keys` and add them to `removed` if they are not in `keys`.\n\n  prevKeys.forEach(function (key, prevListIndex) {\n    var listIndex = keyMap.get(key); // In prevList, but not in list, it is removed.\n\n    if (typeof listIndex === "undefined") {\n      ++removedCount;\n      removed.push(prevListIndex);\n    } else {\n      removedMap[listIndex] = removedCount;\n    }\n  }); // Compare `prevKeys` and `keys` and add them to `added` if they are not in `prevKeys`.\n\n  keys.forEach(function (key, listIndex) {\n    var prevListIndex = prevKeyMap.get(key); // In list, but not in prevList, it is added.\n\n    if (typeof prevListIndex === "undefined") {\n      added.push(listIndex);\n      ++addedCount;\n    } else {\n      maintained.push([prevListIndex, listIndex]);\n      removedCount = removedMap[listIndex] || 0;\n      changedBeforeAdded.push([prevListIndex - removedCount, listIndex - addedCount]);\n      fixed.push(listIndex === prevListIndex);\n\n      if (prevListIndex !== listIndex) {\n        changed.push([prevListIndex, listIndex]);\n      }\n    }\n  }); // Sort by ascending order of \'to(list\'s index).\n\n  removed.reverse();\n  return new Result(prevList, list, added, removed, changed, maintained, changedBeforeAdded, fixed);\n}\n\n/**\n * A module that checks diff when values are added, removed, or changed in an array.\n * @ko 배열 또는 오브젝트에서 값이 추가되거나 삭제되거나 순서가 변경사항을 체크하는 모듈입니다.\n * @memberof eg\n */\n\nvar ListDiffer =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param - Initializing Data Array. <ko> 초기 설정할 데이터 배열.</ko>\n   * @param - This callback function returns the key of the item. <ko> 아이템의 키를 반환하는 콜백 함수입니다.</ko>\n   * @example\n   * import ListDiffer from "@egjs/list-differ";\n   * // script => eg.ListDiffer\n   * const differ = new ListDiffer([0, 1, 2, 3, 4, 5], e => e);\n   * const result = differ.update([7, 8, 0, 4, 3, 6, 2, 1]);\n   * // List before update\n   * // [1, 2, 3, 4, 5]\n   * console.log(result.prevList);\n   * // Updated list\n   * // [4, 3, 6, 2, 1]\n   * console.log(result.list);\n   * // Index array of values added to `list`.\n   * // [0, 1, 5]\n   * console.log(result.added);\n   * // Index array of values removed in `prevList`.\n   * // [5]\n   * console.log(result.removed);\n   * // An array of index pairs of `prevList` and `list` with different indexes from `prevList` and `list`.\n   * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n   * console.log(result.changed);\n   * // The subset of `changed` and an array of index pairs that moved data directly. Indicate an array of absolute index pairs of `ordered`.(Formatted by: Array<[index of prevList, index of list]>)\n   * // [[4, 3], [3, 4], [2, 6]]\n   * console.log(result.pureChanged);\n   * // An array of index pairs to be `ordered` that can synchronize `list` before adding data. (Formatted by: Array<[prevIndex, nextIndex]>)\n   * // [[4, 1], [4, 2], [4, 3]]\n   * console.log(result.ordered);\n   * // An array of index pairs of `prevList` and `list` that have not been added/removed so data is preserved.\n   * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n   * console.log(result.maintained);\n   */\n  function ListDiffer(list, findKeyCallback) {\n    if (list === void 0) {\n      list = [];\n    }\n\n    this.findKeyCallback = findKeyCallback;\n    this.list = [].slice.call(list);\n  }\n  /**\n   * Update list.\n   * @ko 리스트를 업데이트를 합니다.\n   * @param - List to update <ko> 업데이트할 리스트 </ko>\n   * @return - Returns the results of an update from `prevList` to `list`.<ko> `prevList`에서 `list`로 업데이트한 결과를 반환한다. </ko>\n   */\n\n\n  var __proto = ListDiffer.prototype;\n\n  __proto.update = function (list) {\n    var newData = [].slice.call(list);\n    var result = diff(this.list, newData, this.findKeyCallback);\n    this.list = newData;\n    return result;\n  };\n\n  return ListDiffer;\n}();\n\n/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\n\n/* harmony default export */ __webpack_exports__["default"] = (ListDiffer);\n\n//# sourceMappingURL=list-differ.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@egjs/list-differ/dist/list-differ.esm.js\n')},"./node_modules/@egjs/vue-flicking/dist/flicking-inline.css":
/*!******************************************************************!*\
  !*** ./node_modules/@egjs/vue-flicking/dist/flicking-inline.css ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(/*! !../../../css-loader??ref--6-oneOf-3-1!../../../postcss-loader/src??ref--6-oneOf-3-2!./flicking-inline.css */ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/@egjs/vue-flicking/dist/flicking-inline.css");\nif(typeof content === \'string\') content = [[module.i, content, \'\']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(/*! ../../../vue-style-loader/lib/addStylesClient.js */ "./node_modules/vue-style-loader/lib/addStylesClient.js").default\nvar update = add("cc916c90", content, false, {"sourceMap":false,"shadowMode":false});\n// Hot Module Replacement\nif(true) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(/*! !../../../css-loader??ref--6-oneOf-3-1!../../../postcss-loader/src??ref--6-oneOf-3-2!./flicking-inline.css */ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/@egjs/vue-flicking/dist/flicking-inline.css", function() {\n     var newContent = __webpack_require__(/*! !../../../css-loader??ref--6-oneOf-3-1!../../../postcss-loader/src??ref--6-oneOf-3-2!./flicking-inline.css */ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/@egjs/vue-flicking/dist/flicking-inline.css");\n     if(typeof newContent === \'string\') newContent = [[module.i, newContent, \'\']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGVnanMvdnVlLWZsaWNraW5nL2Rpc3QvZmxpY2tpbmctaW5saW5lLmNzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZWdqcy92dWUtZmxpY2tpbmcvZGlzdC9mbGlja2luZy1pbmxpbmUuY3NzPzc4ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNi1vbmVPZi0zLTEhLi4vLi4vLi4vcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTYtb25lT2YtMy0yIS4vZmxpY2tpbmctaW5saW5lLmNzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcImNjOTE2YzkwXCIsIGNvbnRlbnQsIGZhbHNlLCB7XCJzb3VyY2VNYXBcIjpmYWxzZSxcInNoYWRvd01vZGVcIjpmYWxzZX0pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS02LW9uZU9mLTMtMSEuLi8uLi8uLi9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNi1vbmVPZi0zLTIhLi9mbGlja2luZy1pbmxpbmUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNi1vbmVPZi0zLTEhLi4vLi4vLi4vcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTYtb25lT2YtMy0yIS4vZmxpY2tpbmctaW5saW5lLmNzc1wiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@egjs/vue-flicking/dist/flicking-inline.css\n')},"./node_modules/@egjs/vue-flicking/dist/flicking.css":
/*!***********************************************************!*\
  !*** ./node_modules/@egjs/vue-flicking/dist/flicking.css ***!
  \***********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(/*! !../../../css-loader??ref--6-oneOf-3-1!../../../postcss-loader/src??ref--6-oneOf-3-2!./flicking.css */ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/@egjs/vue-flicking/dist/flicking.css");\nif(typeof content === \'string\') content = [[module.i, content, \'\']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(/*! ../../../vue-style-loader/lib/addStylesClient.js */ "./node_modules/vue-style-loader/lib/addStylesClient.js").default\nvar update = add("000166c2", content, false, {"sourceMap":false,"shadowMode":false});\n// Hot Module Replacement\nif(true) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(/*! !../../../css-loader??ref--6-oneOf-3-1!../../../postcss-loader/src??ref--6-oneOf-3-2!./flicking.css */ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/@egjs/vue-flicking/dist/flicking.css", function() {\n     var newContent = __webpack_require__(/*! !../../../css-loader??ref--6-oneOf-3-1!../../../postcss-loader/src??ref--6-oneOf-3-2!./flicking.css */ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/@egjs/vue-flicking/dist/flicking.css");\n     if(typeof newContent === \'string\') newContent = [[module.i, newContent, \'\']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGVnanMvdnVlLWZsaWNraW5nL2Rpc3QvZmxpY2tpbmcuY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlZ2pzL3Z1ZS1mbGlja2luZy9kaXN0L2ZsaWNraW5nLmNzcz81NzFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTYtb25lT2YtMy0xIS4uLy4uLy4uL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS02LW9uZU9mLTMtMiEuL2ZsaWNraW5nLmNzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjAwMDE2NmMyXCIsIGNvbnRlbnQsIGZhbHNlLCB7XCJzb3VyY2VNYXBcIjpmYWxzZSxcInNoYWRvd01vZGVcIjpmYWxzZX0pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS02LW9uZU9mLTMtMSEuLi8uLi8uLi9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNi1vbmVPZi0zLTIhLi9mbGlja2luZy5jc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS02LW9uZU9mLTMtMSEuLi8uLi8uLi9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNi1vbmVPZi0zLTIhLi9mbGlja2luZy5jc3NcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@egjs/vue-flicking/dist/flicking.css\n')},"./node_modules/@egjs/vue-flicking/dist/flicking.esm.js":
/*!**************************************************************!*\
  !*** ./node_modules/@egjs/vue-flicking/dist/flicking.esm.js ***!
  \**************************************************************/
/*! exports provided: default, Flicking, install, version, ALIGN, AnchorPoint, AnimatingState, AxesController, BoundCameraMode, CIRCULAR_FALLBACK, CLASS, Camera, CircularCameraMode, Control, DIRECTION, DisabledState, DraggingState, ERROR_CODE, EVENTS, ExternalRenderer, FlickingError, FreeControl, HoldingState, IdleState, LinearCameraMode, MOVE_TYPE, NormalRenderingStrategy, Panel, Renderer, SnapControl, State, StateMachine, StrictControl, VanillaElementProvider, VanillaRenderer, Viewport, VirtualElementProvider, VirtualManager, VirtualPanel, VirtualRenderingStrategy, checkExistence, circulateIndex, circulatePosition, clamp, find, findIndex, findRight, getDefaultCameraTransform, getDirection, getElement, getFlickingAttached, getMinusCompensatedIndex, getProgress, getRenderingPanels, getStyle, includes, isBetween, isString, merge, parseAlign, parseArithmeticExpression, parseArithmeticSize, parseBounce, parseCSSSizeValue, parseElement, parsePanelAlign, range, setPrototypeOf, setSize, sync, toArray, withFlickingMethods */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Flicking", function() { return Flicking; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "install", function() { return install; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "version", function() { return version; });\n/* harmony import */ var _egjs_list_differ__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @egjs/list-differ */ "./node_modules/@egjs/list-differ/dist/list-differ.esm.js");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm.js");\n/* harmony import */ var _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @egjs/flicking */ "./node_modules/@egjs/flicking/dist/flicking.esm.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ALIGN", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["ALIGN"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnchorPoint", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["AnchorPoint"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnimatingState", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["AnimatingState"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AxesController", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["AxesController"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BoundCameraMode", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["BoundCameraMode"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CIRCULAR_FALLBACK", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["CIRCULAR_FALLBACK"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CLASS", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["CLASS"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Camera", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["Camera"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CircularCameraMode", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["CircularCameraMode"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Control", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["Control"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DIRECTION", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["DIRECTION"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DisabledState", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["DisabledState"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DraggingState", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["DraggingState"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERROR_CODE", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["ERROR_CODE"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EVENTS", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["EVENTS"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExternalRenderer", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["ExternalRenderer"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlickingError", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["FlickingError"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FreeControl", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["FreeControl"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HoldingState", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["HoldingState"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IdleState", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["IdleState"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LinearCameraMode", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["LinearCameraMode"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MOVE_TYPE", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["MOVE_TYPE"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NormalRenderingStrategy", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["NormalRenderingStrategy"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Panel", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["Panel"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Renderer", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["Renderer"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SnapControl", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["SnapControl"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "State", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["State"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateMachine", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["StateMachine"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StrictControl", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["StrictControl"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VanillaElementProvider", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["VanillaElementProvider"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VanillaRenderer", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["VanillaRenderer"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Viewport", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["Viewport"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VirtualElementProvider", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["VirtualElementProvider"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VirtualManager", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["VirtualManager"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VirtualPanel", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["VirtualPanel"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VirtualRenderingStrategy", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["VirtualRenderingStrategy"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "checkExistence", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["checkExistence"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "circulateIndex", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["circulateIndex"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "circulatePosition", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["circulatePosition"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["clamp"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "find", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["find"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "findIndex", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["findIndex"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "findRight", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["findRight"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getDefaultCameraTransform", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["getDefaultCameraTransform"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getDirection", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["getDirection"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getElement", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["getElement"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getFlickingAttached", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["getFlickingAttached"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMinusCompensatedIndex", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["getMinusCompensatedIndex"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getProgress", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["getProgress"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getRenderingPanels", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["getRenderingPanels"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getStyle", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["getStyle"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "includes", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["includes"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isBetween", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["isBetween"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["isString"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["merge"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseAlign", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["parseAlign"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseArithmeticExpression", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["parseArithmeticExpression"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseArithmeticSize", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["parseArithmeticSize"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseBounce", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["parseBounce"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseCSSSizeValue", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["parseCSSSizeValue"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseElement", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["parseElement"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parsePanelAlign", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["parsePanelAlign"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "range", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["range"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setPrototypeOf", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["setPrototypeOf"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setSize", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["setSize"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sync", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["sync"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "toArray", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["toArray"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "withFlickingMethods", function() { return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["withFlickingMethods"]; });\n\n/*\nCopyright (c) 2015-present NAVER Corp.\nname: @egjs/vue-flicking\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-flicking/tree/master/packages/vue-flicking\nversion: 4.5.2\n*/\n\n\n\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nfunction __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    "throw": verb(1),\n    "return": verb(2)\n  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError("Generator is already executing.");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\nfunction __read(o, n) {\n  var m = typeof Symbol === "function" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i["return"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nvar VueRenderer =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(VueRenderer, _super);\n\n  function VueRenderer(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this._vueFlicking = options.vueFlicking;\n    return _this;\n  }\n\n  var __proto = VueRenderer.prototype;\n\n  __proto.render = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var flicking, vueFlicking, strategy;\n      return __generator(this, function (_a) {\n        flicking = Object(_egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["getFlickingAttached"])(this._flicking);\n        vueFlicking = this._vueFlicking;\n        strategy = this._strategy;\n        strategy.updateRenderingPanels(flicking);\n        strategy.renderPanels(flicking);\n        return [2\n        /*return*/\n        , new Promise(function (resolve) {\n          vueFlicking.$once("render", resolve);\n          vueFlicking.$forceUpdate();\n        })];\n      });\n    });\n  };\n\n  __proto.forceRenderAllPanels = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var vueFlicking;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            vueFlicking = this._vueFlicking;\n            return [4\n            /*yield*/\n            , _super.prototype.forceRenderAllPanels.call(this)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve) {\n              vueFlicking.$once("render", resolve);\n              vueFlicking.$forceUpdate();\n            })];\n        }\n      });\n    });\n  };\n\n  __proto._collectPanels = function () {\n    var flicking = Object(_egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["getFlickingAttached"])(this._flicking);\n    var vueFlicking = this._vueFlicking;\n    var vuePanels = vueFlicking.$children;\n    this._panels = this._strategy.collectPanels(flicking, vuePanels);\n  };\n\n  __proto._createPanel = function (externalComponent, options) {\n    return this._strategy.createPanel(externalComponent, options);\n  };\n\n  return VueRenderer;\n}(_egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["ExternalRenderer"]);\n\n/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nvar VuePanel = vue__WEBPACK_IMPORTED_MODULE_1__["default"].extend({\n  data: function () {\n    return {\n      hide: false\n    };\n  },\n  render: function () {\n    var _a;\n\n    var children = this.hide ? undefined : (_a = this.$slots.default) !== null && _a !== void 0 ? _a : []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n\n    return children;\n  },\n  methods: {\n    getElement: function () {\n      return this.$el;\n    }\n  }\n});\n\nvar VueElementProvider =\n/*#__PURE__*/\nfunction () {\n  function VueElementProvider(el) {\n    this._el = el;\n  }\n\n  var __proto = VueElementProvider.prototype;\n  Object.defineProperty(__proto, "element", {\n    get: function () {\n      return this._el.getElement();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(__proto, "rendered", {\n    get: function () {\n      return !this._el.hide;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  __proto.show = function () {\n    this._el.hide = false;\n  };\n\n  __proto.hide = function () {\n    this._el.hide = true;\n  };\n\n  return VueElementProvider;\n}();\n\nvar FlickingProps = {\n  viewportTag: {\n    type: String,\n    default: "div",\n    required: false\n  },\n  cameraTag: {\n    type: String,\n    default: "div",\n    required: false\n  },\n  hideBeforeInit: {\n    type: Boolean,\n    default: false,\n    required: false\n  },\n  firstPanelSize: {\n    type: String,\n    required: false\n  },\n  options: {\n    type: Object,\n    default: function () {\n      return {};\n    },\n    required: false\n  },\n  plugins: {\n    type: Array,\n    default: function () {\n      return [];\n    },\n    required: false\n  },\n  status: {\n    type: Object,\n    required: false\n  }\n};\n\nvar getSlots = function (component) {\n  var _a, _b;\n\n  return (_b = (_a = component.$slots.default) === null || _a === void 0 ? void 0 : _a.filter(function (slot) {\n    return slot.tag;\n  })) !== null && _b !== void 0 ? _b : [];\n};\nvar fillKeys = function (component) {\n  var vnodes = getSlots(component);\n  vnodes.forEach(function (node, idx) {\n    if (node.key == null) {\n      node.key = "$_".concat(idx);\n    }\n  });\n};\n\nvar Flicking = vue__WEBPACK_IMPORTED_MODULE_1__["default"].extend({\n  props: FlickingProps,\n  components: {\n    Panel: VuePanel\n  },\n  data: function () {\n    // Mocking the type, as we don\'t want them to be reactive\n    return {};\n  },\n  created: function () {\n    this.diffResult = null;\n    Object(_egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["withFlickingMethods"])(this, "vanillaFlicking");\n  },\n  mounted: function () {\n    var _this = this;\n\n    var _a;\n\n    var options = this.options;\n    var viewportEl = this.$el;\n    var rendererOptions = {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      vueFlicking: this,\n      align: options.align,\n      strategy: options.virtual && ((_a = options.panelsPerView) !== null && _a !== void 0 ? _a : -1) > 0 ? new _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["VirtualRenderingStrategy"]() : new _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["NormalRenderingStrategy"]({\n        providerCtor: VueElementProvider\n      })\n    };\n    var flicking = new _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["default"](viewportEl, __assign(__assign({}, options), {\n      externalRenderer: new VueRenderer(rendererOptions)\n    }));\n    this.vanillaFlicking = flicking;\n    flicking.once(_egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["EVENTS"].READY, function () {\n      _this.$forceUpdate();\n    });\n    var slots = getSlots(this);\n    this.slotDiffer = new _egjs_list_differ__WEBPACK_IMPORTED_MODULE_0__["default"](slots, function (vnode) {\n      return vnode.key;\n    });\n    this.pluginsDiffer = new _egjs_list_differ__WEBPACK_IMPORTED_MODULE_0__["default"]();\n\n    this._bindEvents();\n\n    this._checkPlugins();\n\n    if (this.status) {\n      flicking.setStatus(this.status);\n    }\n  },\n  beforeDestroy: function () {\n    var _a;\n\n    (_a = this.vanillaFlicking) === null || _a === void 0 ? void 0 : _a.destroy();\n  },\n  beforeMount: function () {\n    fillKeys(this);\n  },\n  beforeUpdate: function () {\n    fillKeys(this);\n    this.diffResult = this.slotDiffer.update(getSlots(this));\n  },\n  updated: function () {\n    var flicking = this.vanillaFlicking;\n    var diffResult = this.diffResult;\n\n    this._checkPlugins();\n\n    this.$emit("render");\n    if (!diffResult || !flicking.initialized) return;\n    Object(_egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["sync"])(flicking, diffResult, this.$children);\n\n    if (diffResult.added.length > 0 || diffResult.removed.length > 0) {\n      this.$forceUpdate();\n    }\n\n    this.diffResult = null;\n  },\n  render: function (h) {\n    var _a, _b;\n\n    var flicking = this.vanillaFlicking;\n    var options = this.options;\n    var initialized = !!this.diffResult && flicking && flicking.initialized;\n    var isHorizontal = flicking ? flicking.horizontal : (_a = options.horizontal) !== null && _a !== void 0 ? _a : true;\n    var viewportData = {\n      class: {\n        "flicking-viewport": true,\n        "vertical": !isHorizontal,\n        "flicking-hidden": this.hideBeforeInit && !initialized\n      }\n    };\n    var cameraData = {\n      class: {\n        "flicking-camera": true\n      },\n      style: !initialized && this.firstPanelSize ? {\n        transform: Object(_egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["getDefaultCameraTransform"])(options.align, options.horizontal, this.firstPanelSize)\n      } : {}\n    };\n    var panels = options.virtual && ((_b = options.panelsPerView) !== null && _b !== void 0 ? _b : -1) > 0 ? this._getVirtualPanels(h, initialized) : this._getPanels(h, initialized);\n    return h(this.viewportTag, viewportData, [h(this.cameraTag, cameraData, panels), this.$slots.viewport]);\n  },\n  methods: {\n    /* eslint-disable @typescript-eslint/naming-convention */\n    _getSlots: function () {\n      var _a, _b;\n\n      return (_b = (_a = this.$slots.default) === null || _a === void 0 ? void 0 : _a.filter(function (slot) {\n        return slot.tag;\n      })) !== null && _b !== void 0 ? _b : [];\n    },\n    _fillKeys: function () {\n      var vnodes = this._getSlots();\n\n      vnodes.forEach(function (node, idx) {\n        if (node.key == null) {\n          node.key = "$_".concat(idx);\n        }\n      });\n    },\n    _bindEvents: function () {\n      var _this = this;\n\n      var flicking = this.vanillaFlicking;\n      var events = Object.keys(_egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["EVENTS"]).map(function (key) {\n        return _egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["EVENTS"][key];\n      });\n      events.forEach(function (eventName) {\n        flicking.on(eventName, function (e) {\n          e.currentTarget = _this; // Make events from camelCase to kebab-case\n\n          _this.$emit(eventName.replace(/([A-Z])/g, "-$1").toLowerCase(), e);\n        });\n      });\n    },\n    _checkPlugins: function () {\n      var _a, _b;\n\n      var _c = this.pluginsDiffer.update(this.plugins),\n          list = _c.list,\n          added = _c.added,\n          removed = _c.removed,\n          prevList = _c.prevList;\n\n      (_a = this.vanillaFlicking).addPlugins.apply(_a, __spreadArray([], __read(added.map(function (index) {\n        return list[index];\n      })), false));\n\n      (_b = this.vanillaFlicking).removePlugins.apply(_b, __spreadArray([], __read(removed.map(function (index) {\n        return prevList[index];\n      })), false));\n    },\n    _getPanels: function (h, initialized) {\n      var slots = initialized ? Object(_egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["getRenderingPanels"])(this.vanillaFlicking, this.diffResult) : this._getSlots();\n      return slots.map(function (slot) {\n        return h("Panel", {\n          key: slot.key\n        }, [slot]);\n      });\n    },\n    _getVirtualPanels: function (h, initialized) {\n      var options = this.options;\n      var _a = options.virtual.panelClass,\n          panelClass = _a === void 0 ? "flicking-panel" : _a;\n      var panelsPerView = options.panelsPerView;\n      var flicking = this.vanillaFlicking;\n      var renderingIndexes = initialized ? flicking.renderer.strategy.getRenderingIndexesByOrder(flicking) : Object(_egjs_flicking__WEBPACK_IMPORTED_MODULE_2__["range"])(panelsPerView + 1);\n      var firstPanel = flicking && flicking.panels[0];\n      var size = firstPanel ? flicking.horizontal ? {\n        width: firstPanel.size\n      } : {\n        height: firstPanel.size\n      } : {};\n      return renderingIndexes.map(function (idx) {\n        return h("div", {\n          key: idx,\n          staticClass: panelClass,\n          style: size,\n          domProps: {\n            "data-element-index": idx\n          }\n        });\n      });\n    }\n  }\n});\n\nvar version = "4.5.2";\n\nvar install = function (Vue) {\n  Vue.component("Flicking", Flicking);\n};\n\nvar plugin = {\n  Flicking: Flicking,\n  install: install,\n  version: version\n};\n\n/* harmony default export */ __webpack_exports__["default"] = (plugin);\n\n//# sourceMappingURL=flicking.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@egjs/vue-flicking/dist/flicking.esm.js\n')},"./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/@egjs/vue-flicking/dist/flicking-inline.css":
/*!******************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--6-oneOf-3-1!./node_modules/postcss-loader/src??ref--6-oneOf-3-2!./node_modules/@egjs/vue-flicking/dist/flicking-inline.css ***!
  \******************************************************************************************************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(/*! ../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);\n// imports\n\n\n// module\nexports.push([module.i, ".flicking-viewport{position:relative;overflow:hidden}.flicking-viewport:not(.vertical){width:100%;height:100%}.flicking-camera{width:100%;height:100%;position:relative;z-index:1;white-space:nowrap;will-change:transform}.flicking-camera>*{display:inline-block;white-space:normal;vertical-align:top}.flicking-viewport.vertical,.flicking-viewport.vertical>.flicking-camera{display:inline-block}.flicking-viewport.vertical.middle>.flicking-camera>*{vertical-align:middle}.flicking-viewport.vertical.bottom>.flicking-camera>*{vertical-align:bottom}.flicking-viewport.vertical>.flicking-camera>*{display:block}.flicking-viewport.flicking-hidden>.flicking-camera>*{visibility:hidden}", ""]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPyEuL25vZGVfbW9kdWxlcy9AZWdqcy92dWUtZmxpY2tpbmcvZGlzdC9mbGlja2luZy1pbmxpbmUuY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlZ2pzL3Z1ZS1mbGlja2luZy9kaXN0L2ZsaWNraW5nLWlubGluZS5jc3M/YzRiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmZsaWNraW5nLXZpZXdwb3J0e3Bvc2l0aW9uOnJlbGF0aXZlO292ZXJmbG93OmhpZGRlbn0uZmxpY2tpbmctdmlld3BvcnQ6bm90KC52ZXJ0aWNhbCl7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0uZmxpY2tpbmctY2FtZXJhe3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDoxO3doaXRlLXNwYWNlOm5vd3JhcDt3aWxsLWNoYW5nZTp0cmFuc2Zvcm19LmZsaWNraW5nLWNhbWVyYT4qe2Rpc3BsYXk6aW5saW5lLWJsb2NrO3doaXRlLXNwYWNlOm5vcm1hbDt2ZXJ0aWNhbC1hbGlnbjp0b3B9LmZsaWNraW5nLXZpZXdwb3J0LnZlcnRpY2FsLC5mbGlja2luZy12aWV3cG9ydC52ZXJ0aWNhbD4uZmxpY2tpbmctY2FtZXJhe2Rpc3BsYXk6aW5saW5lLWJsb2NrfS5mbGlja2luZy12aWV3cG9ydC52ZXJ0aWNhbC5taWRkbGU+LmZsaWNraW5nLWNhbWVyYT4qe3ZlcnRpY2FsLWFsaWduOm1pZGRsZX0uZmxpY2tpbmctdmlld3BvcnQudmVydGljYWwuYm90dG9tPi5mbGlja2luZy1jYW1lcmE+Knt2ZXJ0aWNhbC1hbGlnbjpib3R0b219LmZsaWNraW5nLXZpZXdwb3J0LnZlcnRpY2FsPi5mbGlja2luZy1jYW1lcmE+KntkaXNwbGF5OmJsb2NrfS5mbGlja2luZy12aWV3cG9ydC5mbGlja2luZy1oaWRkZW4+LmZsaWNraW5nLWNhbWVyYT4qe3Zpc2liaWxpdHk6aGlkZGVufVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/@egjs/vue-flicking/dist/flicking-inline.css\n')},"./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/@egjs/vue-flicking/dist/flicking.css":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--6-oneOf-3-1!./node_modules/postcss-loader/src??ref--6-oneOf-3-2!./node_modules/@egjs/vue-flicking/dist/flicking.css ***!
  \***********************************************************************************************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(/*! ../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);\n// imports\n\n\n// module\nexports.push([module.i, ".flicking-viewport{position:relative;overflow:hidden}.flicking-camera{width:100%;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;position:relative;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;z-index:1}.flicking-camera>*{-ms-flex-negative:0;flex-shrink:0}.flicking-viewport.vertical{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex}.flicking-viewport.vertical>.flicking-camera{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.flicking-viewport.flicking-hidden .flicking-camera>*{visibility:hidden}", ""]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPyEuL25vZGVfbW9kdWxlcy9AZWdqcy92dWUtZmxpY2tpbmcvZGlzdC9mbGlja2luZy5jc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVnanMvdnVlLWZsaWNraW5nL2Rpc3QvZmxpY2tpbmcuY3NzPzFjMTQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5mbGlja2luZy12aWV3cG9ydHtwb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdzpoaWRkZW59LmZsaWNraW5nLWNhbWVyYXt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDstbXMtZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtZGlyZWN0aW9uOnJvdzt6LWluZGV4OjF9LmZsaWNraW5nLWNhbWVyYT4qey1tcy1mbGV4LW5lZ2F0aXZlOjA7ZmxleC1zaHJpbms6MH0uZmxpY2tpbmctdmlld3BvcnQudmVydGljYWx7ZGlzcGxheTotd2Via2l0LWlubGluZS1ib3g7ZGlzcGxheTotbXMtaW5saW5lLWZsZXhib3g7ZGlzcGxheTppbmxpbmUtZmxleH0uZmxpY2tpbmctdmlld3BvcnQudmVydGljYWw+LmZsaWNraW5nLWNhbWVyYXtkaXNwbGF5Oi13ZWJraXQtaW5saW5lLWJveDtkaXNwbGF5Oi1tcy1pbmxpbmUtZmxleGJveDtkaXNwbGF5OmlubGluZS1mbGV4Oy13ZWJraXQtYm94LW9yaWVudDp2ZXJ0aWNhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsOy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5mbGlja2luZy12aWV3cG9ydC5mbGlja2luZy1oaWRkZW4gLmZsaWNraW5nLWNhbWVyYT4qe3Zpc2liaWxpdHk6aGlkZGVufVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/@egjs/vue-flicking/dist/flicking.css\n')}}]);